// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "cmall/db-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // cmall_config
  //

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::
  persist_statement_name[] = "persist_cmall_config";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::
  find_statement_name[] = "find_cmall_config";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::
  erase_statement_name[] = "erase_cmall_config";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::
  query_statement_name[] = "query_cmall_config";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::
  erase_query_statement_name[] = "erase_query_cmall_config";

  const unsigned int access::object_traits_impl< ::cmall_config, id_pgsql >::
  persist_statement_types[] =
  {
    0
  };

  const unsigned int access::object_traits_impl< ::cmall_config, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::cmall_config, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::cmall_config, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_config, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::cmall_config, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_config, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::cmall_config, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::cmall_config, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::uint64_t& v =
        o.id_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::persist_statement[] =
  "INSERT INTO \"cmall_config\" "
  "(\"id\") "
  "VALUES "
  "(DEFAULT) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::find_statement[] =
  "SELECT "
  "\"cmall_config\".\"id\" "
  "FROM \"cmall_config\" "
  "WHERE \"cmall_config\".\"id\"=$1";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::erase_statement[] =
  "DELETE FROM \"cmall_config\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::query_statement[] =
  "SELECT "
  "\"cmall_config\".\"id\" "
  "FROM \"cmall_config\"";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"cmall_config\"";

  const char access::object_traits_impl< ::cmall_config, id_pgsql >::table_name[] =
  "\"cmall_config\"";

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::cmall_config, id_pgsql >::pointer_type
  access::object_traits_impl< ::cmall_config, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::cmall_config, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::cmall_config, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::cmall_config, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::cmall_config, id_pgsql >::object_type >
  access::object_traits_impl< ::cmall_config, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::cmall_config, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // Recipient
  //

  bool access::composite_value_traits< ::Recipient, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // name
    //
    if (t[0UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // telephone
    //
    if (t[1UL])
    {
      i.telephone_value.capacity (i.telephone_size);
      grew = true;
    }

    // address
    //
    if (t[2UL])
    {
      i.address_value.capacity (i.address_size);
      grew = true;
    }

    // province
    //
    if (t[3UL])
    {
      i.province_value.capacity (i.province_size);
      grew = true;
    }

    // city
    //
    if (t[4UL])
    {
      i.city_value.capacity (i.city_size);
      grew = true;
    }

    // district
    //
    if (t[5UL])
    {
      i.district_value.capacity (i.district_size);
      grew = true;
    }

    // specific_address
    //
    if (t[6UL])
    {
      i.specific_address_value.capacity (i.specific_address_size);
      grew = true;
    }

    // as_default
    //
    t[7UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::Recipient, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // telephone
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.telephone_value.data ();
    b[n].capacity = i.telephone_value.capacity ();
    b[n].size = &i.telephone_size;
    b[n].is_null = &i.telephone_null;
    n++;

    // address
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.address_value.data ();
    b[n].capacity = i.address_value.capacity ();
    b[n].size = &i.address_size;
    b[n].is_null = &i.address_null;
    n++;

    // province
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.province_value.data ();
    b[n].capacity = i.province_value.capacity ();
    b[n].size = &i.province_size;
    b[n].is_null = &i.province_null;
    n++;

    // city
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.city_value.data ();
    b[n].capacity = i.city_value.capacity ();
    b[n].size = &i.city_size;
    b[n].is_null = &i.city_null;
    n++;

    // district
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.district_value.data ();
    b[n].capacity = i.district_value.capacity ();
    b[n].size = &i.district_size;
    b[n].is_null = &i.district_null;
    n++;

    // specific_address
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.specific_address_value.data ();
    b[n].capacity = i.specific_address_value.capacity ();
    b[n].size = &i.specific_address_size;
    b[n].is_null = &i.specific_address_null;
    n++;

    // as_default
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.as_default_value;
    b[n].is_null = &i.as_default_null;
    n++;
  }

  bool access::composite_value_traits< ::Recipient, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // name
    //
    {
      ::std::string const& v =
        o.name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // telephone
    //
    {
      ::std::string const& v =
        o.telephone;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.telephone_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.telephone_value,
        size,
        is_null,
        v);
      i.telephone_null = is_null;
      i.telephone_size = size;
      grew = grew || (cap != i.telephone_value.capacity ());
    }

    // address
    //
    {
      ::std::string const& v =
        o.address;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.address_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.address_value,
        size,
        is_null,
        v);
      i.address_null = is_null;
      i.address_size = size;
      grew = grew || (cap != i.address_value.capacity ());
    }

    // province
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.province;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.province_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.province_value,
        size,
        is_null,
        v);
      i.province_null = is_null;
      i.province_size = size;
      grew = grew || (cap != i.province_value.capacity ());
    }

    // city
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.city;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.city_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.city_value,
        size,
        is_null,
        v);
      i.city_null = is_null;
      i.city_size = size;
      grew = grew || (cap != i.city_value.capacity ());
    }

    // district
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.district;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.district_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.district_value,
        size,
        is_null,
        v);
      i.district_null = is_null;
      i.district_size = size;
      grew = grew || (cap != i.district_value.capacity ());
    }

    // specific_address
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.specific_address;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.specific_address_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.specific_address_value,
        size,
        is_null,
        v);
      i.specific_address_null = is_null;
      i.specific_address_size = size;
      grew = grew || (cap != i.specific_address_value.capacity ());
    }

    // as_default
    //
    {
      bool const& v =
        o.as_default;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.as_default_value, is_null, v);
      i.as_default_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::Recipient, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // name
    //
    {
      ::std::string& v =
        o.name;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // telephone
    //
    {
      ::std::string& v =
        o.telephone;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.telephone_value,
        i.telephone_size,
        i.telephone_null);
    }

    // address
    //
    {
      ::std::string& v =
        o.address;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.address_value,
        i.address_size,
        i.address_null);
    }

    // province
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.province;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.province_value,
        i.province_size,
        i.province_null);
    }

    // city
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.city;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.city_value,
        i.city_size,
        i.city_null);
    }

    // district
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.district;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.district_value,
        i.district_size,
        i.district_null);
    }

    // specific_address
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.specific_address;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.specific_address_value,
        i.specific_address_size,
        i.specific_address_null);
    }

    // as_default
    //
    {
      bool& v =
        o.as_default;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.as_default_value,
        i.as_default_null);
    }
  }

  // cmall_user
  //

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::
  persist_statement_name[] = "persist_cmall_user";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::
  find_statement_name[] = "find_cmall_user";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::
  update_statement_name[] = "update_cmall_user";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::
  erase_statement_name[] = "erase_cmall_user";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::
  query_statement_name[] = "query_cmall_user";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::
  erase_query_statement_name[] = "erase_query_cmall_user";

  const unsigned int access::object_traits_impl< ::cmall_user, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int2_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_user, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_user, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int2_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::cmall_user, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< used_phones_traits > used_phones;
    pgsql::container_statements_impl< recipients_traits > recipients;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : used_phones (c, id, idn, idt),
      recipients (c, id, idn, idt)
    {
    }
  };

  // used_phones
  //

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  select_name[] = "select_cmall_user_used_phones";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  insert_name[] = "insert_cmall_user_used_phones";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  delete_name[] = "delete_cmall_user_used_phones";

  const unsigned int access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  select_statement[] =
  "SELECT "
  "\"cmall_user_used_phones\".\"index\", "
  "\"cmall_user_used_phones\".\"value\" "
  "FROM \"cmall_user_used_phones\" "
  "WHERE \"cmall_user_used_phones\".\"object_id\"=$1 ORDER BY \"cmall_user_used_phones\".\"index\"";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  insert_statement[] =
  "INSERT INTO \"cmall_user_used_phones\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value\") "
  "VALUES "
  "($1, $2, $3)";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  delete_statement[] =
  "DELETE FROM \"cmall_user_used_phones\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = d.value_value.data ();
    b[n].capacity = d.value_value.capacity ();
    b[n].size = &d.value_size;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (t[1UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.value_value.capacity ());
      pgsql::value_traits<
          value_type,
          pgsql::id_string >::set_image (
        i.value_value,
        size,
        is_null,
        v);
      i.value_null = is_null;
      i.value_size = size;
      grew = grew || (cap != i.value_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      pgsql::value_traits<
          value_type,
          pgsql::id_string >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::used_phones_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  // recipients
  //

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  select_name[] = "select_cmall_user_recipients";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  insert_name[] = "insert_cmall_user_recipients";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  delete_name[] = "delete_cmall_user_recipients";

  const unsigned int access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::bool_oid
  };

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  select_statement[] =
  "SELECT "
  "\"cmall_user_recipients\".\"index\", "
  "\"cmall_user_recipients\".\"value_name\", "
  "\"cmall_user_recipients\".\"value_telephone\", "
  "\"cmall_user_recipients\".\"value_address\", "
  "\"cmall_user_recipients\".\"value_province\", "
  "\"cmall_user_recipients\".\"value_city\", "
  "\"cmall_user_recipients\".\"value_district\", "
  "\"cmall_user_recipients\".\"value_specific_address\", "
  "\"cmall_user_recipients\".\"value_as_default\" "
  "FROM \"cmall_user_recipients\" "
  "WHERE \"cmall_user_recipients\".\"object_id\"=$1 ORDER BY \"cmall_user_recipients\".\"index\"";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  insert_statement[] =
  "INSERT INTO \"cmall_user_recipients\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_name\", "
  "\"value_telephone\", "
  "\"value_address\", "
  "\"value_province\", "
  "\"value_city\", "
  "\"value_district\", "
  "\"value_specific_address\", "
  "\"value_as_default\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  delete_statement[] =
  "DELETE FROM \"cmall_user_recipients\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::recipients_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::cmall_user, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_user, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::cmall_user, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_user, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.uid_value,
        i.uid_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // uid_
    //
    t[0UL] = 0;

    // name_
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // active_phone
    //
    if (t[2UL])
    {
      i.active_phone_value.capacity (i.active_phone_size);
      grew = true;
    }

    // verified_
    //
    t[3UL] = 0;

    // state_
    //
    t[4UL] = 0;

    // desc_
    //
    if (t[5UL])
    {
      i.desc_value.capacity (i.desc_size);
      grew = true;
    }

    // created_at_
    //
    t[6UL] = 0;

    // updated_at_
    //
    t[7UL] = 0;

    // deleted_at_
    //
    t[8UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // uid_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.uid_value;
      b[n].is_null = &i.uid_null;
      n++;
    }

    // name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // active_phone
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.active_phone_value.data ();
    b[n].capacity = i.active_phone_value.capacity ();
    b[n].size = &i.active_phone_size;
    b[n].is_null = &i.active_phone_null;
    n++;

    // verified_
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.verified_value;
    b[n].is_null = &i.verified_null;
    n++;

    // state_
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i.state_value;
    b[n].is_null = &i.state_null;
    n++;

    // desc_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.desc_value.data ();
    b[n].capacity = i.desc_value.capacity ();
    b[n].size = &i.desc_size;
    b[n].is_null = &i.desc_null;
    n++;

    // created_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.created_at_value;
    b[n].is_null = &i.created_at_null;
    n++;

    // updated_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.updated_at_value;
    b[n].is_null = &i.updated_at_null;
    n++;

    // deleted_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.deleted_at_value;
    b[n].is_null = &i.deleted_at_null;
    n++;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // active_phone
    //
    {
      ::std::string const& v =
        o.active_phone;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.active_phone_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.active_phone_value,
        size,
        is_null,
        v);
      i.active_phone_null = is_null;
      i.active_phone_size = size;
      grew = grew || (cap != i.active_phone_value.capacity ());
    }

    // verified_
    //
    {
      bool const& v =
        o.verified_;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.verified_value, is_null, v);
      i.verified_null = is_null;
    }

    // state_
    //
    {
      ::uint8_t const& v =
        o.state_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint8_t,
          pgsql::id_smallint >::set_image (
        i.state_value, is_null, v);
      i.state_null = is_null;
    }

    // desc_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.desc_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.desc_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.desc_value,
        size,
        is_null,
        v);
      i.desc_null = is_null;
      i.desc_size = size;
      grew = grew || (cap != i.desc_value.capacity ());
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.created_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.created_at_value, is_null, v);
      i.created_at_null = is_null;
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.updated_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.updated_at_value, is_null, v);
      i.updated_at_null = is_null;
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime > const& v =
        o.deleted_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_image (
        i.deleted_at_value, is_null, v);
      i.deleted_at_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // uid_
    //
    {
      ::uint64_t& v =
        o.uid_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.uid_value,
        i.uid_null);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // active_phone
    //
    {
      ::std::string& v =
        o.active_phone;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.active_phone_value,
        i.active_phone_size,
        i.active_phone_null);
    }

    // verified_
    //
    {
      bool& v =
        o.verified_;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.verified_value,
        i.verified_null);
    }

    // state_
    //
    {
      ::uint8_t& v =
        o.state_;

      pgsql::value_traits<
          ::uint8_t,
          pgsql::id_smallint >::set_value (
        v,
        i.state_value,
        i.state_null);
    }

    // desc_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.desc_;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.desc_value,
        i.desc_size,
        i.desc_null);
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.created_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.created_at_value,
        i.created_at_null);
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.updated_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.updated_at_value,
        i.updated_at_null);
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime >& v =
        o.deleted_at_;

      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_value (
        v,
        i.deleted_at_value,
        i.deleted_at_null);
    }
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::persist_statement[] =
  "INSERT INTO \"cmall_user\" "
  "(\"uid\", "
  "\"name\", "
  "\"active_phone\", "
  "\"verified\", "
  "\"state\", "
  "\"desc\", "
  "\"created_at\", "
  "\"updated_at\", "
  "\"deleted_at\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8) "
  "RETURNING \"uid\"";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::find_statement[] =
  "SELECT "
  "\"cmall_user\".\"uid\", "
  "\"cmall_user\".\"name\", "
  "\"cmall_user\".\"active_phone\", "
  "\"cmall_user\".\"verified\", "
  "\"cmall_user\".\"state\", "
  "\"cmall_user\".\"desc\", "
  "\"cmall_user\".\"created_at\", "
  "\"cmall_user\".\"updated_at\", "
  "\"cmall_user\".\"deleted_at\" "
  "FROM \"cmall_user\" "
  "WHERE \"cmall_user\".\"uid\"=$1";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::update_statement[] =
  "UPDATE \"cmall_user\" "
  "SET "
  "\"name\"=$1, "
  "\"active_phone\"=$2, "
  "\"verified\"=$3, "
  "\"state\"=$4, "
  "\"desc\"=$5, "
  "\"created_at\"=$6, "
  "\"updated_at\"=$7, "
  "\"deleted_at\"=$8 "
  "WHERE \"uid\"=$9";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::erase_statement[] =
  "DELETE FROM \"cmall_user\" "
  "WHERE \"uid\"=$1";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::query_statement[] =
  "SELECT "
  "\"cmall_user\".\"uid\", "
  "\"cmall_user\".\"name\", "
  "\"cmall_user\".\"active_phone\", "
  "\"cmall_user\".\"verified\", "
  "\"cmall_user\".\"state\", "
  "\"cmall_user\".\"desc\", "
  "\"cmall_user\".\"created_at\", "
  "\"cmall_user\".\"updated_at\", "
  "\"cmall_user\".\"deleted_at\" "
  "FROM \"cmall_user\"";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"cmall_user\"";

  const char access::object_traits_impl< ::cmall_user, id_pgsql >::table_name[] =
  "\"cmall_user\"";

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.uid_ = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, id (obj));

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // used_phones
    //
    {
      ::std::vector< ::std::basic_string< char > > const& v =
        obj.used_phones;

      used_phones_traits::persist (
        v,
        esc.used_phones);
    }

    // recipients
    //
    {
      ::std::vector< ::Recipient > const& v =
        obj.recipients;

      recipients_traits::persist (
        v,
        esc.recipients);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // used_phones
    //
    {
      ::std::vector< ::std::basic_string< char > > const& v =
        obj.used_phones;

      used_phones_traits::update (
        v,
        esc.used_phones);
    }

    // recipients
    //
    {
      ::std::vector< ::Recipient > const& v =
        obj.recipients;

      recipients_traits::update (
        v,
        esc.recipients);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // used_phones
    //
    {
      used_phones_traits::erase (
        esc.used_phones);
    }

    // recipients
    //
    {
      recipients_traits::erase (
        esc.recipients);
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::cmall_user, id_pgsql >::pointer_type
  access::object_traits_impl< ::cmall_user, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::cmall_user, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // used_phones
    //
    {
      ::std::vector< ::std::basic_string< char > >& v =
        obj.used_phones;

      used_phones_traits::load (
        v,
        esc.used_phones);
    }

    // recipients
    //
    {
      ::std::vector< ::Recipient >& v =
        obj.recipients;

      recipients_traits::load (
        v,
        esc.recipients);
    }
  }

  result< access::object_traits_impl< ::cmall_user, id_pgsql >::object_type >
  access::object_traits_impl< ::cmall_user, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::cmall_user, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // administrators
  //

  const char access::object_traits_impl< ::administrators, id_pgsql >::
  persist_statement_name[] = "persist_administrators";

  const char access::object_traits_impl< ::administrators, id_pgsql >::
  find_statement_name[] = "find_administrators";

  const char access::object_traits_impl< ::administrators, id_pgsql >::
  update_statement_name[] = "update_administrators";

  const char access::object_traits_impl< ::administrators, id_pgsql >::
  erase_statement_name[] = "erase_administrators";

  const char access::object_traits_impl< ::administrators, id_pgsql >::
  query_statement_name[] = "query_administrators";

  const char access::object_traits_impl< ::administrators, id_pgsql >::
  erase_query_statement_name[] = "erase_query_administrators";

  const unsigned int access::object_traits_impl< ::administrators, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::administrators, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::administrators, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::cmall_user,
    id_pgsql,
    access::object_traits_impl< ::administrators, id_pgsql >::user_tag>::
  table_name[] = "\"user\"";

  struct access::object_traits_impl< ::administrators, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::administrators, id_pgsql >::id_type
  access::object_traits_impl< ::administrators, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::administrators, id_pgsql >::id_type
  access::object_traits_impl< ::administrators, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.uid_value,
        i.uid_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::administrators, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // uid_
    //
    t[0UL] = 0;

    // user
    //
    t[1UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::administrators, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // uid_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.uid_value;
      b[n].is_null = &i.uid_null;
      n++;
    }

    // user
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.user_value;
    b[n].is_null = &i.user_null;
    n++;
  }

  void access::object_traits_impl< ::administrators, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::administrators, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // user
    //
    {
      ::std::shared_ptr< ::cmall_user > const& v =
        o.user;

      typedef object_traits< ::cmall_user > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::cmall_user > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& ptr_id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.user_value, is_null, ptr_id);
        i.user_null = is_null;
      }
      else
        i.user_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::administrators, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // uid_
    //
    {
      ::uint64_t& v =
        o.uid_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.uid_value,
        i.uid_null);
    }

    // user
    //
    {
      ::std::shared_ptr< ::cmall_user >& v =
        o.user;

      typedef object_traits< ::cmall_user > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::cmall_user > > ptr_traits;

      if (i.user_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type ptr_id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          ptr_id,
          i.user_value,
          i.user_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (ptr_id));
      }
    }
  }

  void access::object_traits_impl< ::administrators, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::administrators, id_pgsql >::persist_statement[] =
  "INSERT INTO \"administrators\" "
  "(\"uid\", "
  "\"user\") "
  "VALUES "
  "(DEFAULT, $1) "
  "RETURNING \"uid\"";

  const char access::object_traits_impl< ::administrators, id_pgsql >::find_statement[] =
  "SELECT "
  "\"administrators\".\"uid\", "
  "\"administrators\".\"user\" "
  "FROM \"administrators\" "
  "WHERE \"administrators\".\"uid\"=$1";

  const char access::object_traits_impl< ::administrators, id_pgsql >::update_statement[] =
  "UPDATE \"administrators\" "
  "SET "
  "\"user\"=$1 "
  "WHERE \"uid\"=$2";

  const char access::object_traits_impl< ::administrators, id_pgsql >::erase_statement[] =
  "DELETE FROM \"administrators\" "
  "WHERE \"uid\"=$1";

  const char access::object_traits_impl< ::administrators, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"administrators\".\"uid\",\n"
  "\"administrators\".\"user\"\n"
  "FROM \"administrators\"\n"
  "LEFT JOIN \"cmall_user\" AS \"user\" ON \"user\".\"uid\"=\"administrators\".\"user\"";

  const char access::object_traits_impl< ::administrators, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"administrators\"";

  const char access::object_traits_impl< ::administrators, id_pgsql >::table_name[] =
  "\"administrators\"";

  void access::object_traits_impl< ::administrators, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.uid_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::administrators, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::administrators, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::administrators, id_pgsql >::pointer_type
  access::object_traits_impl< ::administrators, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::administrators, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::administrators, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::administrators, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::administrators, id_pgsql >::object_type >
  access::object_traits_impl< ::administrators, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::administrators, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // cmall_merchant
  //

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  persist_statement_name[] = "persist_cmall_merchant";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  find_statement_name[] = "find_cmall_merchant";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  update_statement_name[] = "update_cmall_merchant";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  erase_statement_name[] = "erase_cmall_merchant";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  query_statement_name[] = "query_cmall_merchant";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  erase_query_statement_name[] = "erase_query_cmall_merchant";

  const unsigned int access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int2_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int2_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::cmall_merchant, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::cmall_merchant, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.uid_value,
        i.uid_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // uid_
    //
    t[0UL] = 0;

    // name_
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // verified_
    //
    t[2UL] = 0;

    // state_
    //
    t[3UL] = 0;

    // desc_
    //
    if (t[4UL])
    {
      i.desc_value.capacity (i.desc_size);
      grew = true;
    }

    // api_token_
    //
    if (t[5UL])
    {
      i.api_token_value.capacity (i.api_token_size);
      grew = true;
    }

    // created_at_
    //
    t[6UL] = 0;

    // updated_at_
    //
    t[7UL] = 0;

    // deleted_at_
    //
    t[8UL] = 0;

    // repo_path
    //
    if (t[9UL])
    {
      i.repo_path_value.capacity (i.repo_path_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // uid_
    //
    if (sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.uid_value;
      b[n].is_null = &i.uid_null;
      n++;
    }

    // name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // verified_
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.verified_value;
    b[n].is_null = &i.verified_null;
    n++;

    // state_
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i.state_value;
    b[n].is_null = &i.state_null;
    n++;

    // desc_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.desc_value.data ();
    b[n].capacity = i.desc_value.capacity ();
    b[n].size = &i.desc_size;
    b[n].is_null = &i.desc_null;
    n++;

    // api_token_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.api_token_value.data ();
    b[n].capacity = i.api_token_value.capacity ();
    b[n].size = &i.api_token_size;
    b[n].is_null = &i.api_token_null;
    n++;

    // created_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.created_at_value;
    b[n].is_null = &i.created_at_null;
    n++;

    // updated_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.updated_at_value;
    b[n].is_null = &i.updated_at_null;
    n++;

    // deleted_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.deleted_at_value;
    b[n].is_null = &i.deleted_at_null;
    n++;

    // repo_path
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.repo_path_value.data ();
    b[n].capacity = i.repo_path_value.capacity ();
    b[n].size = &i.repo_path_size;
    b[n].is_null = &i.repo_path_null;
    n++;
  }

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // uid_
    //
    if (sk == statement_insert)
    {
      ::uint64_t const& v =
        o.uid_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.uid_value, is_null, v);
      i.uid_null = is_null;
    }

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // verified_
    //
    {
      bool const& v =
        o.verified_;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.verified_value, is_null, v);
      i.verified_null = is_null;
    }

    // state_
    //
    {
      ::uint8_t const& v =
        o.state_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint8_t,
          pgsql::id_smallint >::set_image (
        i.state_value, is_null, v);
      i.state_null = is_null;
    }

    // desc_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.desc_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.desc_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.desc_value,
        size,
        is_null,
        v);
      i.desc_null = is_null;
      i.desc_size = size;
      grew = grew || (cap != i.desc_value.capacity ());
    }

    // api_token_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.api_token_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.api_token_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.api_token_value,
        size,
        is_null,
        v);
      i.api_token_null = is_null;
      i.api_token_size = size;
      grew = grew || (cap != i.api_token_value.capacity ());
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.created_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.created_at_value, is_null, v);
      i.created_at_null = is_null;
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.updated_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.updated_at_value, is_null, v);
      i.updated_at_null = is_null;
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime > const& v =
        o.deleted_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_image (
        i.deleted_at_value, is_null, v);
      i.deleted_at_null = is_null;
    }

    // repo_path
    //
    {
      ::std::string const& v =
        o.repo_path;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.repo_path_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.repo_path_value,
        size,
        is_null,
        v);
      i.repo_path_null = is_null;
      i.repo_path_size = size;
      grew = grew || (cap != i.repo_path_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // uid_
    //
    {
      ::uint64_t& v =
        o.uid_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.uid_value,
        i.uid_null);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // verified_
    //
    {
      bool& v =
        o.verified_;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.verified_value,
        i.verified_null);
    }

    // state_
    //
    {
      ::uint8_t& v =
        o.state_;

      pgsql::value_traits<
          ::uint8_t,
          pgsql::id_smallint >::set_value (
        v,
        i.state_value,
        i.state_null);
    }

    // desc_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.desc_;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.desc_value,
        i.desc_size,
        i.desc_null);
    }

    // api_token_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.api_token_;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.api_token_value,
        i.api_token_size,
        i.api_token_null);
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.created_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.created_at_value,
        i.created_at_null);
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.updated_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.updated_at_value,
        i.updated_at_null);
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime >& v =
        o.deleted_at_;

      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_value (
        v,
        i.deleted_at_value,
        i.deleted_at_null);
    }

    // repo_path
    //
    {
      ::std::string& v =
        o.repo_path;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.repo_path_value,
        i.repo_path_size,
        i.repo_path_null);
    }
  }

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::persist_statement[] =
  "INSERT INTO \"cmall_merchant\" "
  "(\"uid\", "
  "\"name\", "
  "\"verified\", "
  "\"state\", "
  "\"desc\", "
  "\"api_token\", "
  "\"created_at\", "
  "\"updated_at\", "
  "\"deleted_at\", "
  "\"repo_path\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::find_statement[] =
  "SELECT "
  "\"cmall_merchant\".\"uid\", "
  "\"cmall_merchant\".\"name\", "
  "\"cmall_merchant\".\"verified\", "
  "\"cmall_merchant\".\"state\", "
  "\"cmall_merchant\".\"desc\", "
  "\"cmall_merchant\".\"api_token\", "
  "\"cmall_merchant\".\"created_at\", "
  "\"cmall_merchant\".\"updated_at\", "
  "\"cmall_merchant\".\"deleted_at\", "
  "\"cmall_merchant\".\"repo_path\" "
  "FROM \"cmall_merchant\" "
  "WHERE \"cmall_merchant\".\"uid\"=$1";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::update_statement[] =
  "UPDATE \"cmall_merchant\" "
  "SET "
  "\"name\"=$1, "
  "\"verified\"=$2, "
  "\"state\"=$3, "
  "\"desc\"=$4, "
  "\"api_token\"=$5, "
  "\"created_at\"=$6, "
  "\"updated_at\"=$7, "
  "\"deleted_at\"=$8, "
  "\"repo_path\"=$9 "
  "WHERE \"uid\"=$10";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::erase_statement[] =
  "DELETE FROM \"cmall_merchant\" "
  "WHERE \"uid\"=$1";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::query_statement[] =
  "SELECT "
  "\"cmall_merchant\".\"uid\", "
  "\"cmall_merchant\".\"name\", "
  "\"cmall_merchant\".\"verified\", "
  "\"cmall_merchant\".\"state\", "
  "\"cmall_merchant\".\"desc\", "
  "\"cmall_merchant\".\"api_token\", "
  "\"cmall_merchant\".\"created_at\", "
  "\"cmall_merchant\".\"updated_at\", "
  "\"cmall_merchant\".\"deleted_at\", "
  "\"cmall_merchant\".\"repo_path\" "
  "FROM \"cmall_merchant\"";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"cmall_merchant\"";

  const char access::object_traits_impl< ::cmall_merchant, id_pgsql >::table_name[] =
  "\"cmall_merchant\"";

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::cmall_merchant, id_pgsql >::pointer_type
  access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::cmall_merchant, id_pgsql >::object_type >
  access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // goods_snapshot
  //

  bool access::composite_value_traits< ::goods_snapshot, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // merchant_id
    //
    t[0UL] = 0;

    // goods_id
    //
    if (t[1UL])
    {
      i.goods_id_value.capacity (i.goods_id_size);
      grew = true;
    }

    // name_
    //
    if (t[2UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // price_
    //
    if (t[3UL])
    {
      i.price_value.capacity (i.price_size);
      grew = true;
    }

    // description_
    //
    if (t[4UL])
    {
      i.description_value.capacity (i.description_size);
      grew = true;
    }

    // good_version_git
    //
    if (t[5UL])
    {
      i.good_version_git_value.capacity (i.good_version_git_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::goods_snapshot, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // merchant_id
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.merchant_id_value;
    b[n].is_null = &i.merchant_id_null;
    n++;

    // goods_id
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.goods_id_value.data ();
    b[n].capacity = i.goods_id_value.capacity ();
    b[n].size = &i.goods_id_size;
    b[n].is_null = &i.goods_id_null;
    n++;

    // name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // price_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.price_value.data ();
    b[n].capacity = i.price_value.capacity ();
    b[n].size = &i.price_size;
    b[n].is_null = &i.price_null;
    n++;

    // description_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.description_value.data ();
    b[n].capacity = i.description_value.capacity ();
    b[n].size = &i.description_size;
    b[n].is_null = &i.description_null;
    n++;

    // good_version_git
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.good_version_git_value.data ();
    b[n].capacity = i.good_version_git_value.capacity ();
    b[n].size = &i.good_version_git_size;
    b[n].is_null = &i.good_version_git_null;
    n++;
  }

  bool access::composite_value_traits< ::goods_snapshot, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // merchant_id
    //
    {
      ::uint64_t const& v =
        o.merchant_id;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.merchant_id_value, is_null, v);
      i.merchant_id_null = is_null;
    }

    // goods_id
    //
    {
      ::std::string const& v =
        o.goods_id;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.goods_id_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.goods_id_value,
        size,
        is_null,
        v);
      i.goods_id_null = is_null;
      i.goods_id_size = size;
      grew = grew || (cap != i.goods_id_value.capacity ());
    }

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // price_
    //
    {
      ::cpp_numeric const& v =
        o.price_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.price_value.capacity ());
      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_image (
        i.price_value,
        size,
        is_null,
        v);
      i.price_null = is_null;
      i.price_size = size;
      grew = grew || (cap != i.price_value.capacity ());
    }

    // description_
    //
    {
      ::std::string const& v =
        o.description_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.description_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.description_value,
        size,
        is_null,
        v);
      i.description_null = is_null;
      i.description_size = size;
      grew = grew || (cap != i.description_value.capacity ());
    }

    // good_version_git
    //
    {
      ::std::string const& v =
        o.good_version_git;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.good_version_git_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.good_version_git_value,
        size,
        is_null,
        v);
      i.good_version_git_null = is_null;
      i.good_version_git_size = size;
      grew = grew || (cap != i.good_version_git_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::goods_snapshot, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // merchant_id
    //
    {
      ::uint64_t& v =
        o.merchant_id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.merchant_id_value,
        i.merchant_id_null);
    }

    // goods_id
    //
    {
      ::std::string& v =
        o.goods_id;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.goods_id_value,
        i.goods_id_size,
        i.goods_id_null);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // price_
    //
    {
      ::cpp_numeric& v =
        o.price_;

      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_value (
        v,
        i.price_value,
        i.price_size,
        i.price_null);
    }

    // description_
    //
    {
      ::std::string& v =
        o.description_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.description_value,
        i.description_size,
        i.description_null);
    }

    // good_version_git
    //
    {
      ::std::string& v =
        o.good_version_git;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.good_version_git_value,
        i.good_version_git_size,
        i.good_version_git_null);
    }
  }

  // cmall_order
  //

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::
  persist_statement_name[] = "persist_cmall_order";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::
  find_statement_name[] = "find_cmall_order";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::
  update_statement_name[] = "update_cmall_order";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::
  erase_statement_name[] = "erase_cmall_order";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::
  query_statement_name[] = "query_cmall_order";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::
  erase_query_statement_name[] = "erase_query_cmall_order";

  const unsigned int access::object_traits_impl< ::cmall_order, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int2_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_order, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_order, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int2_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::cmall_order, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< recipient_traits > recipient;
    pgsql::container_statements_impl< bought_goods_traits > bought_goods;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : recipient (c, id, idn, idt),
      bought_goods (c, id, idn, idt)
    {
    }
  };

  // recipient
  //

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  select_name[] = "select_cmall_order_recipient";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  insert_name[] = "insert_cmall_order_recipient";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  delete_name[] = "delete_cmall_order_recipient";

  const unsigned int access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::bool_oid
  };

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  select_statement[] =
  "SELECT "
  "\"cmall_order_recipient\".\"index\", "
  "\"cmall_order_recipient\".\"value_name\", "
  "\"cmall_order_recipient\".\"value_telephone\", "
  "\"cmall_order_recipient\".\"value_address\", "
  "\"cmall_order_recipient\".\"value_province\", "
  "\"cmall_order_recipient\".\"value_city\", "
  "\"cmall_order_recipient\".\"value_district\", "
  "\"cmall_order_recipient\".\"value_specific_address\", "
  "\"cmall_order_recipient\".\"value_as_default\" "
  "FROM \"cmall_order_recipient\" "
  "WHERE \"cmall_order_recipient\".\"object_id\"=$1 ORDER BY \"cmall_order_recipient\".\"index\"";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  insert_statement[] =
  "INSERT INTO \"cmall_order_recipient\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_name\", "
  "\"value_telephone\", "
  "\"value_address\", "
  "\"value_province\", "
  "\"value_city\", "
  "\"value_district\", "
  "\"value_specific_address\", "
  "\"value_as_default\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  delete_statement[] =
  "DELETE FROM \"cmall_order_recipient\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::recipient_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  // bought_goods
  //

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  select_name[] = "select_cmall_order_bought_goods";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  insert_name[] = "insert_cmall_order_bought_goods";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  delete_name[] = "delete_cmall_order_bought_goods";

  const unsigned int access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  select_statement[] =
  "SELECT "
  "\"cmall_order_bought_goods\".\"index\", "
  "\"cmall_order_bought_goods\".\"value_merchant_id\", "
  "\"cmall_order_bought_goods\".\"value_goods_id\", "
  "\"cmall_order_bought_goods\".\"value_name\", "
  "\"cmall_order_bought_goods\".\"value_price\"::TEXT, "
  "\"cmall_order_bought_goods\".\"value_description\", "
  "\"cmall_order_bought_goods\".\"value_good_version_git\" "
  "FROM \"cmall_order_bought_goods\" "
  "WHERE \"cmall_order_bought_goods\".\"object_id\"=$1 ORDER BY \"cmall_order_bought_goods\".\"index\"";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  insert_statement[] =
  "INSERT INTO \"cmall_order_bought_goods\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_merchant_id\", "
  "\"value_goods_id\", "
  "\"value_name\", "
  "\"value_price\", "
  "\"value_description\", "
  "\"value_good_version_git\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6::numeric, $7, $8)";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  delete_statement[] =
  "DELETE FROM \"cmall_order_bought_goods\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::bought_goods_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::cmall_order, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_order, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::cmall_order, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_order, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // oid_
    //
    if (t[1UL])
    {
      i.oid_value.capacity (i.oid_size);
      grew = true;
    }

    // buyer_
    //
    t[2UL] = 0;

    // price_
    //
    if (t[3UL])
    {
      i.price_value.capacity (i.price_size);
      grew = true;
    }

    // currency_rate_
    //
    if (t[4UL])
    {
      i.currency_rate_value.capacity (i.currency_rate_size);
      grew = true;
    }

    // pay_amount_
    //
    if (t[5UL])
    {
      i.pay_amount_value.capacity (i.pay_amount_size);
      grew = true;
    }

    // stage_
    //
    t[6UL] = 0;

    // payed_at_
    //
    t[7UL] = 0;

    // close_at_
    //
    t[8UL] = 0;

    // ext_
    //
    if (t[9UL])
    {
      i.ext_value.capacity (i.ext_size);
      grew = true;
    }

    // created_at_
    //
    t[10UL] = 0;

    // updated_at_
    //
    t[11UL] = 0;

    // deleted_at_
    //
    t[12UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // oid_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.oid_value.data ();
    b[n].capacity = i.oid_value.capacity ();
    b[n].size = &i.oid_size;
    b[n].is_null = &i.oid_null;
    n++;

    // buyer_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.buyer_value;
    b[n].is_null = &i.buyer_null;
    n++;

    // price_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.price_value.data ();
    b[n].capacity = i.price_value.capacity ();
    b[n].size = &i.price_size;
    b[n].is_null = &i.price_null;
    n++;

    // currency_rate_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.currency_rate_value.data ();
    b[n].capacity = i.currency_rate_value.capacity ();
    b[n].size = &i.currency_rate_size;
    b[n].is_null = &i.currency_rate_null;
    n++;

    // pay_amount_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.pay_amount_value.data ();
    b[n].capacity = i.pay_amount_value.capacity ();
    b[n].size = &i.pay_amount_size;
    b[n].is_null = &i.pay_amount_null;
    n++;

    // stage_
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i.stage_value;
    b[n].is_null = &i.stage_null;
    n++;

    // payed_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.payed_at_value;
    b[n].is_null = &i.payed_at_null;
    n++;

    // close_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.close_at_value;
    b[n].is_null = &i.close_at_null;
    n++;

    // ext_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ext_value.data ();
    b[n].capacity = i.ext_value.capacity ();
    b[n].size = &i.ext_size;
    b[n].is_null = &i.ext_null;
    n++;

    // created_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.created_at_value;
    b[n].is_null = &i.created_at_null;
    n++;

    // updated_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.updated_at_value;
    b[n].is_null = &i.updated_at_null;
    n++;

    // deleted_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.deleted_at_value;
    b[n].is_null = &i.deleted_at_null;
    n++;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // oid_
    //
    {
      ::std::string const& v =
        o.oid_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.oid_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.oid_value,
        size,
        is_null,
        v);
      i.oid_null = is_null;
      i.oid_size = size;
      grew = grew || (cap != i.oid_value.capacity ());
    }

    // buyer_
    //
    {
      ::uint64_t const& v =
        o.buyer_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.buyer_value, is_null, v);
      i.buyer_null = is_null;
    }

    // price_
    //
    {
      ::cpp_numeric const& v =
        o.price_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.price_value.capacity ());
      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_image (
        i.price_value,
        size,
        is_null,
        v);
      i.price_null = is_null;
      i.price_size = size;
      grew = grew || (cap != i.price_value.capacity ());
    }

    // currency_rate_
    //
    {
      ::cpp_numeric const& v =
        o.currency_rate_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.currency_rate_value.capacity ());
      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_image (
        i.currency_rate_value,
        size,
        is_null,
        v);
      i.currency_rate_null = is_null;
      i.currency_rate_size = size;
      grew = grew || (cap != i.currency_rate_value.capacity ());
    }

    // pay_amount_
    //
    {
      ::cpp_numeric const& v =
        o.pay_amount_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.pay_amount_value.capacity ());
      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_image (
        i.pay_amount_value,
        size,
        is_null,
        v);
      i.pay_amount_null = is_null;
      i.pay_amount_size = size;
      grew = grew || (cap != i.pay_amount_value.capacity ());
    }

    // stage_
    //
    {
      ::uint8_t const& v =
        o.stage_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint8_t,
          pgsql::id_smallint >::set_image (
        i.stage_value, is_null, v);
      i.stage_null = is_null;
    }

    // payed_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime > const& v =
        o.payed_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_image (
        i.payed_at_value, is_null, v);
      i.payed_at_null = is_null;
    }

    // close_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime > const& v =
        o.close_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_image (
        i.close_at_value, is_null, v);
      i.close_at_null = is_null;
    }

    // ext_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.ext_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.ext_value.capacity ());
      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_image (
        i.ext_value,
        size,
        is_null,
        v);
      i.ext_null = is_null;
      i.ext_size = size;
      grew = grew || (cap != i.ext_value.capacity ());
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.created_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.created_at_value, is_null, v);
      i.created_at_null = is_null;
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.updated_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.updated_at_value, is_null, v);
      i.updated_at_null = is_null;
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime > const& v =
        o.deleted_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_image (
        i.deleted_at_value, is_null, v);
      i.deleted_at_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::uint64_t& v =
        o.id_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // oid_
    //
    {
      ::std::string& v =
        o.oid_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.oid_value,
        i.oid_size,
        i.oid_null);
    }

    // buyer_
    //
    {
      ::uint64_t& v =
        o.buyer_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.buyer_value,
        i.buyer_null);
    }

    // price_
    //
    {
      ::cpp_numeric& v =
        o.price_;

      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_value (
        v,
        i.price_value,
        i.price_size,
        i.price_null);
    }

    // currency_rate_
    //
    {
      ::cpp_numeric& v =
        o.currency_rate_;

      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_value (
        v,
        i.currency_rate_value,
        i.currency_rate_size,
        i.currency_rate_null);
    }

    // pay_amount_
    //
    {
      ::cpp_numeric& v =
        o.pay_amount_;

      pgsql::value_traits<
          ::cpp_numeric,
          pgsql::id_string >::set_value (
        v,
        i.pay_amount_value,
        i.pay_amount_size,
        i.pay_amount_null);
    }

    // stage_
    //
    {
      ::uint8_t& v =
        o.stage_;

      pgsql::value_traits<
          ::uint8_t,
          pgsql::id_smallint >::set_value (
        v,
        i.stage_value,
        i.stage_null);
    }

    // payed_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime >& v =
        o.payed_at_;

      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_value (
        v,
        i.payed_at_value,
        i.payed_at_null);
    }

    // close_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime >& v =
        o.close_at_;

      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_value (
        v,
        i.close_at_value,
        i.close_at_null);
    }

    // ext_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.ext_;

      pgsql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          pgsql::id_string >::set_value (
        v,
        i.ext_value,
        i.ext_size,
        i.ext_null);
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.created_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.created_at_value,
        i.created_at_null);
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.updated_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.updated_at_value,
        i.updated_at_null);
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime >& v =
        o.deleted_at_;

      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_value (
        v,
        i.deleted_at_value,
        i.deleted_at_null);
    }
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::persist_statement[] =
  "INSERT INTO \"cmall_order\" "
  "(\"id\", "
  "\"oid\", "
  "\"buyer\", "
  "\"price\", "
  "\"currency_rate\", "
  "\"pay_amount\", "
  "\"stage\", "
  "\"payed_at\", "
  "\"close_at\", "
  "\"ext\", "
  "\"created_at\", "
  "\"updated_at\", "
  "\"deleted_at\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3::numeric, $4::numeric, $5::numeric, $6, $7, $8, $9, $10, $11, $12) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::find_statement[] =
  "SELECT "
  "\"cmall_order\".\"id\", "
  "\"cmall_order\".\"oid\", "
  "\"cmall_order\".\"buyer\", "
  "\"cmall_order\".\"price\"::TEXT, "
  "\"cmall_order\".\"currency_rate\"::TEXT, "
  "\"cmall_order\".\"pay_amount\"::TEXT, "
  "\"cmall_order\".\"stage\", "
  "\"cmall_order\".\"payed_at\", "
  "\"cmall_order\".\"close_at\", "
  "\"cmall_order\".\"ext\", "
  "\"cmall_order\".\"created_at\", "
  "\"cmall_order\".\"updated_at\", "
  "\"cmall_order\".\"deleted_at\" "
  "FROM \"cmall_order\" "
  "WHERE \"cmall_order\".\"id\"=$1";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::update_statement[] =
  "UPDATE \"cmall_order\" "
  "SET "
  "\"oid\"=$1, "
  "\"buyer\"=$2, "
  "\"price\"=$3::numeric, "
  "\"currency_rate\"=$4::numeric, "
  "\"pay_amount\"=$5::numeric, "
  "\"stage\"=$6, "
  "\"payed_at\"=$7, "
  "\"close_at\"=$8, "
  "\"ext\"=$9, "
  "\"created_at\"=$10, "
  "\"updated_at\"=$11, "
  "\"deleted_at\"=$12 "
  "WHERE \"id\"=$13";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::erase_statement[] =
  "DELETE FROM \"cmall_order\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::query_statement[] =
  "SELECT "
  "\"cmall_order\".\"id\", "
  "\"cmall_order\".\"oid\", "
  "\"cmall_order\".\"buyer\", "
  "\"cmall_order\".\"price\"::TEXT, "
  "\"cmall_order\".\"currency_rate\"::TEXT, "
  "\"cmall_order\".\"pay_amount\"::TEXT, "
  "\"cmall_order\".\"stage\", "
  "\"cmall_order\".\"payed_at\", "
  "\"cmall_order\".\"close_at\", "
  "\"cmall_order\".\"ext\", "
  "\"cmall_order\".\"created_at\", "
  "\"cmall_order\".\"updated_at\", "
  "\"cmall_order\".\"deleted_at\" "
  "FROM \"cmall_order\"";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"cmall_order\"";

  const char access::object_traits_impl< ::cmall_order, id_pgsql >::table_name[] =
  "\"cmall_order\"";

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, id (obj));

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // recipient
    //
    {
      ::std::vector< ::Recipient > const& v =
        obj.recipient;

      recipient_traits::persist (
        v,
        esc.recipient);
    }

    // bought_goods
    //
    {
      ::std::vector< ::goods_snapshot > const& v =
        obj.bought_goods;

      bought_goods_traits::persist (
        v,
        esc.bought_goods);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // recipient
    //
    {
      ::std::vector< ::Recipient > const& v =
        obj.recipient;

      recipient_traits::update (
        v,
        esc.recipient);
    }

    // bought_goods
    //
    {
      ::std::vector< ::goods_snapshot > const& v =
        obj.bought_goods;

      bought_goods_traits::update (
        v,
        esc.bought_goods);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // recipient
    //
    {
      recipient_traits::erase (
        esc.recipient);
    }

    // bought_goods
    //
    {
      bought_goods_traits::erase (
        esc.bought_goods);
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::cmall_order, id_pgsql >::pointer_type
  access::object_traits_impl< ::cmall_order, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::cmall_order, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // recipient
    //
    {
      ::std::vector< ::Recipient >& v =
        obj.recipient;

      recipient_traits::load (
        v,
        esc.recipient);
    }

    // bought_goods
    //
    {
      ::std::vector< ::goods_snapshot >& v =
        obj.bought_goods;

      bought_goods_traits::load (
        v,
        esc.bought_goods);
    }
  }

  result< access::object_traits_impl< ::cmall_order, id_pgsql >::object_type >
  access::object_traits_impl< ::cmall_order, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::cmall_order, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // cmall_cart
  //

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::
  persist_statement_name[] = "persist_cmall_cart";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::
  find_statement_name[] = "find_cmall_cart";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::
  update_statement_name[] = "update_cmall_cart";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::
  erase_statement_name[] = "erase_cmall_cart";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::
  query_statement_name[] = "query_cmall_cart";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::
  erase_query_statement_name[] = "erase_query_cmall_cart";

  const unsigned int access::object_traits_impl< ::cmall_cart, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_cart, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_cart, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int8_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::cmall_cart, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::cmall_cart, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_cart, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::cmall_cart, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_cart, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::cmall_cart, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // uid_
    //
    t[1UL] = 0;

    // merchant_id_
    //
    t[2UL] = 0;

    // goods_id_
    //
    if (t[3UL])
    {
      i.goods_id_value.capacity (i.goods_id_size);
      grew = true;
    }

    // count_
    //
    t[4UL] = 0;

    // created_at_
    //
    t[5UL] = 0;

    // updated_at_
    //
    t[6UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // uid_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.uid_value;
    b[n].is_null = &i.uid_null;
    n++;

    // merchant_id_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.merchant_id_value;
    b[n].is_null = &i.merchant_id_null;
    n++;

    // goods_id_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.goods_id_value.data ();
    b[n].capacity = i.goods_id_value.capacity ();
    b[n].size = &i.goods_id_size;
    b[n].is_null = &i.goods_id_null;
    n++;

    // count_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;

    // created_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.created_at_value;
    b[n].is_null = &i.created_at_null;
    n++;

    // updated_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.updated_at_value;
    b[n].is_null = &i.updated_at_null;
    n++;
  }

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::cmall_cart, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // uid_
    //
    {
      ::uint64_t const& v =
        o.uid_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.uid_value, is_null, v);
      i.uid_null = is_null;
    }

    // merchant_id_
    //
    {
      ::uint64_t const& v =
        o.merchant_id_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.merchant_id_value, is_null, v);
      i.merchant_id_null = is_null;
    }

    // goods_id_
    //
    {
      ::std::string const& v =
        o.goods_id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.goods_id_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.goods_id_value,
        size,
        is_null,
        v);
      i.goods_id_null = is_null;
      i.goods_id_size = size;
      grew = grew || (cap != i.goods_id_value.capacity ());
    }

    // count_
    //
    {
      ::uint64_t const& v =
        o.count_;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.count_value, is_null, v);
      i.count_null = is_null;
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.created_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.created_at_value, is_null, v);
      i.created_at_null = is_null;
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.updated_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.updated_at_value, is_null, v);
      i.updated_at_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::uint64_t& v =
        o.id_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // uid_
    //
    {
      ::uint64_t& v =
        o.uid_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.uid_value,
        i.uid_null);
    }

    // merchant_id_
    //
    {
      ::uint64_t& v =
        o.merchant_id_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.merchant_id_value,
        i.merchant_id_null);
    }

    // goods_id_
    //
    {
      ::std::string& v =
        o.goods_id_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.goods_id_value,
        i.goods_id_size,
        i.goods_id_null);
    }

    // count_
    //
    {
      ::uint64_t& v =
        o.count_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.count_value,
        i.count_null);
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.created_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.created_at_value,
        i.created_at_null);
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.updated_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.updated_at_value,
        i.updated_at_null);
    }
  }

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::persist_statement[] =
  "INSERT INTO \"cmall_cart\" "
  "(\"id\", "
  "\"uid\", "
  "\"merchant_id\", "
  "\"goods_id\", "
  "\"count\", "
  "\"created_at\", "
  "\"updated_at\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::find_statement[] =
  "SELECT "
  "\"cmall_cart\".\"id\", "
  "\"cmall_cart\".\"uid\", "
  "\"cmall_cart\".\"merchant_id\", "
  "\"cmall_cart\".\"goods_id\", "
  "\"cmall_cart\".\"count\", "
  "\"cmall_cart\".\"created_at\", "
  "\"cmall_cart\".\"updated_at\" "
  "FROM \"cmall_cart\" "
  "WHERE \"cmall_cart\".\"id\"=$1";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::update_statement[] =
  "UPDATE \"cmall_cart\" "
  "SET "
  "\"uid\"=$1, "
  "\"merchant_id\"=$2, "
  "\"goods_id\"=$3, "
  "\"count\"=$4, "
  "\"created_at\"=$5, "
  "\"updated_at\"=$6 "
  "WHERE \"id\"=$7";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::erase_statement[] =
  "DELETE FROM \"cmall_cart\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::query_statement[] =
  "SELECT "
  "\"cmall_cart\".\"id\", "
  "\"cmall_cart\".\"uid\", "
  "\"cmall_cart\".\"merchant_id\", "
  "\"cmall_cart\".\"goods_id\", "
  "\"cmall_cart\".\"count\", "
  "\"cmall_cart\".\"created_at\", "
  "\"cmall_cart\".\"updated_at\" "
  "FROM \"cmall_cart\"";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"cmall_cart\"";

  const char access::object_traits_impl< ::cmall_cart, id_pgsql >::table_name[] =
  "\"cmall_cart\"";

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::cmall_cart, id_pgsql >::pointer_type
  access::object_traits_impl< ::cmall_cart, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::cmall_cart, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::cmall_cart, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::cmall_cart, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::cmall_cart, id_pgsql >::object_type >
  access::object_traits_impl< ::cmall_cart, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::cmall_cart, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // cmall_apply_for_mechant
  //

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  persist_statement_name[] = "persist_cmall_apply_for_mechant";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  find_statement_name[] = "find_cmall_apply_for_mechant";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  update_statement_name[] = "update_cmall_apply_for_mechant";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  erase_statement_name[] = "erase_cmall_apply_for_mechant";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  query_statement_name[] = "query_cmall_apply_for_mechant";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  erase_query_statement_name[] = "erase_query_cmall_apply_for_mechant";

  const unsigned int access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::timestamp_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::cmall_user,
    id_pgsql,
    access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::applicant_tag>::
  table_name[] = "\"applicant\"";

  struct access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::id_type
  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // applicant_
    //
    t[1UL] = 0;

    // ext_
    //
    if (t[2UL])
    {
      i.ext_value.capacity (i.ext_size);
      grew = true;
    }

    // created_at_
    //
    t[3UL] = 0;

    // updated_at_
    //
    t[4UL] = 0;

    // deleted_at_
    //
    t[5UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // applicant_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.applicant_value;
    b[n].is_null = &i.applicant_null;
    n++;

    // ext_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ext_value.data ();
    b[n].capacity = i.ext_value.capacity ();
    b[n].size = &i.ext_size;
    b[n].is_null = &i.ext_null;
    n++;

    // created_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.created_at_value;
    b[n].is_null = &i.created_at_null;
    n++;

    // updated_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.updated_at_value;
    b[n].is_null = &i.updated_at_null;
    n++;

    // deleted_at_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.deleted_at_value;
    b[n].is_null = &i.deleted_at_null;
    n++;
  }

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // applicant_
    //
    {
      ::std::shared_ptr< ::cmall_user > const& v =
        o.applicant_;

      typedef object_traits< ::cmall_user > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::cmall_user > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& ptr_id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.applicant_value, is_null, ptr_id);
        i.applicant_null = is_null;
      }
      else
        i.applicant_null = true;
    }

    // ext_
    //
    {
      ::std::string const& v =
        o.ext_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ext_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.ext_value,
        size,
        is_null,
        v);
      i.ext_null = is_null;
      i.ext_size = size;
      grew = grew || (cap != i.ext_value.capacity ());
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.created_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.created_at_value, is_null, v);
      i.created_at_null = is_null;
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.updated_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.updated_at_value, is_null, v);
      i.updated_at_null = is_null;
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime > const& v =
        o.deleted_at_;

      bool is_null (true);
      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_image (
        i.deleted_at_value, is_null, v);
      i.deleted_at_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::uint64_t& v =
        o.id_;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // applicant_
    //
    {
      ::std::shared_ptr< ::cmall_user >& v =
        o.applicant_;

      typedef object_traits< ::cmall_user > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::cmall_user > > ptr_traits;

      if (i.applicant_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type ptr_id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          ptr_id,
          i.applicant_value,
          i.applicant_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (ptr_id));
      }
    }

    // ext_
    //
    {
      ::std::string& v =
        o.ext_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.ext_value,
        i.ext_size,
        i.ext_null);
    }

    // created_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.created_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.created_at_value,
        i.created_at_null);
    }

    // updated_at_
    //
    {
      ::boost::posix_time::ptime& v =
        o.updated_at_;

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.updated_at_value,
        i.updated_at_null);
    }

    // deleted_at_
    //
    {
      ::odb::nullable< ::boost::posix_time::ptime >& v =
        o.deleted_at_;

      pgsql::value_traits<
          ::odb::nullable< ::boost::posix_time::ptime >,
          pgsql::id_timestamp >::set_value (
        v,
        i.deleted_at_value,
        i.deleted_at_null);
    }
  }

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::persist_statement[] =
  "INSERT INTO \"cmall_apply_for_mechant\" "
  "(\"id\", "
  "\"applicant\", "
  "\"ext\", "
  "\"created_at\", "
  "\"updated_at\", "
  "\"deleted_at\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::find_statement[] =
  "SELECT "
  "\"cmall_apply_for_mechant\".\"id\", "
  "\"cmall_apply_for_mechant\".\"applicant\", "
  "\"cmall_apply_for_mechant\".\"ext\", "
  "\"cmall_apply_for_mechant\".\"created_at\", "
  "\"cmall_apply_for_mechant\".\"updated_at\", "
  "\"cmall_apply_for_mechant\".\"deleted_at\" "
  "FROM \"cmall_apply_for_mechant\" "
  "WHERE \"cmall_apply_for_mechant\".\"id\"=$1";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::update_statement[] =
  "UPDATE \"cmall_apply_for_mechant\" "
  "SET "
  "\"applicant\"=$1, "
  "\"ext\"=$2, "
  "\"created_at\"=$3, "
  "\"updated_at\"=$4, "
  "\"deleted_at\"=$5 "
  "WHERE \"id\"=$6";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::erase_statement[] =
  "DELETE FROM \"cmall_apply_for_mechant\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"cmall_apply_for_mechant\".\"id\",\n"
  "\"cmall_apply_for_mechant\".\"applicant\",\n"
  "\"cmall_apply_for_mechant\".\"ext\",\n"
  "\"cmall_apply_for_mechant\".\"created_at\",\n"
  "\"cmall_apply_for_mechant\".\"updated_at\",\n"
  "\"cmall_apply_for_mechant\".\"deleted_at\"\n"
  "FROM \"cmall_apply_for_mechant\"\n"
  "LEFT JOIN \"cmall_user\" AS \"applicant\" ON \"applicant\".\"uid\"=\"cmall_apply_for_mechant\".\"applicant\"";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"cmall_apply_for_mechant\"";

  const char access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::table_name[] =
  "\"cmall_apply_for_mechant\"";

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::pointer_type
  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::object_type >
  access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"cmall_apply_for_mechant\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_cart\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_order_bought_goods\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_order_recipient\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_order\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_merchant\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"administrators\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_user_recipients\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_user_used_phones\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_user\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"cmall_config\" CASCADE");
          db.execute ("CREATE TABLE IF NOT EXISTS \"schema_version\" (\n"
                      "  \"name\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"version\" BIGINT NOT NULL,\n"
                      "  \"migration\" BOOLEAN NOT NULL)");
          db.execute ("DELETE FROM \"schema_version\"\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"cmall_config\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY)");
          db.execute ("CREATE TABLE \"cmall_user\" (\n"
                      "  \"uid\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"active_phone\" TEXT NOT NULL,\n"
                      "  \"verified\" BOOLEAN NOT NULL,\n"
                      "  \"state\" SMALLINT NOT NULL,\n"
                      "  \"desc\" TEXT NULL,\n"
                      "  \"created_at\" TIMESTAMP NULL,\n"
                      "  \"updated_at\" TIMESTAMP NULL,\n"
                      "  \"deleted_at\" TIMESTAMP NULL)");
          db.execute ("CREATE INDEX \"cmall_user_name_i\"\n"
                      "  ON \"cmall_user\" (\"name\")");
          db.execute ("CREATE INDEX \"cmall_user_active_phone_i\"\n"
                      "  ON \"cmall_user\" (\"active_phone\")");
          db.execute ("CREATE TABLE \"cmall_user_used_phones\" (\n"
                      "  \"object_id\" BIGINT NOT NULL,\n"
                      "  \"index\" BIGINT NOT NULL,\n"
                      "  \"value\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"cmall_user\" (\"uid\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"cmall_user_used_phones_object_id_i\"\n"
                      "  ON \"cmall_user_used_phones\" (\"object_id\")");
          db.execute ("CREATE INDEX \"cmall_user_used_phones_index_i\"\n"
                      "  ON \"cmall_user_used_phones\" (\"index\")");
          db.execute ("CREATE TABLE \"cmall_user_recipients\" (\n"
                      "  \"object_id\" BIGINT NOT NULL,\n"
                      "  \"index\" BIGINT NOT NULL,\n"
                      "  \"value_name\" TEXT NOT NULL,\n"
                      "  \"value_telephone\" TEXT NOT NULL,\n"
                      "  \"value_address\" TEXT NOT NULL,\n"
                      "  \"value_province\" TEXT NULL,\n"
                      "  \"value_city\" TEXT NULL,\n"
                      "  \"value_district\" TEXT NULL,\n"
                      "  \"value_specific_address\" TEXT NULL,\n"
                      "  \"value_as_default\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"cmall_user\" (\"uid\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"cmall_user_recipients_object_id_i\"\n"
                      "  ON \"cmall_user_recipients\" (\"object_id\")");
          db.execute ("CREATE INDEX \"cmall_user_recipients_index_i\"\n"
                      "  ON \"cmall_user_recipients\" (\"index\")");
          db.execute ("CREATE TABLE \"administrators\" (\n"
                      "  \"uid\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"user\" BIGINT NULL,\n"
                      "  CONSTRAINT \"user_fk\"\n"
                      "    FOREIGN KEY (\"user\")\n"
                      "    REFERENCES \"cmall_user\" (\"uid\")\n"
                      "    INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"cmall_merchant\" (\n"
                      "  \"uid\" BIGINT NOT NULL PRIMARY KEY,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"verified\" BOOLEAN NOT NULL,\n"
                      "  \"state\" SMALLINT NOT NULL,\n"
                      "  \"desc\" TEXT NULL,\n"
                      "  \"api_token\" TEXT NULL,\n"
                      "  \"created_at\" TIMESTAMP NULL,\n"
                      "  \"updated_at\" TIMESTAMP NULL,\n"
                      "  \"deleted_at\" TIMESTAMP NULL,\n"
                      "  \"repo_path\" TEXT NOT NULL)");
          db.execute ("CREATE INDEX \"cmall_merchant_name_i\"\n"
                      "  ON \"cmall_merchant\" (\"name\")");
          db.execute ("CREATE TABLE \"cmall_order\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"oid\" TEXT NOT NULL,\n"
                      "  \"buyer\" BIGINT NOT NULL,\n"
                      "  \"price\" NUMERIC NOT NULL,\n"
                      "  \"currency_rate\" numeric NOT NULL DEFAULT '1',\n"
                      "  \"pay_amount\" numeric NOT NULL DEFAULT '0',\n"
                      "  \"stage\" SMALLINT NOT NULL,\n"
                      "  \"payed_at\" TIMESTAMP NULL,\n"
                      "  \"close_at\" TIMESTAMP NULL,\n"
                      "  \"ext\" TEXT NULL,\n"
                      "  \"created_at\" TIMESTAMP NULL,\n"
                      "  \"updated_at\" TIMESTAMP NULL,\n"
                      "  \"deleted_at\" TIMESTAMP NULL)");
          db.execute ("CREATE UNIQUE INDEX \"cmall_order_oid_i\"\n"
                      "  ON \"cmall_order\" (\"oid\")");
          db.execute ("CREATE INDEX \"cmall_order_buyer_i\"\n"
                      "  ON \"cmall_order\" (\"buyer\")");
          db.execute ("CREATE TABLE \"cmall_order_recipient\" (\n"
                      "  \"object_id\" BIGINT NOT NULL,\n"
                      "  \"index\" BIGINT NOT NULL,\n"
                      "  \"value_name\" TEXT NOT NULL,\n"
                      "  \"value_telephone\" TEXT NOT NULL,\n"
                      "  \"value_address\" TEXT NOT NULL,\n"
                      "  \"value_province\" TEXT NULL,\n"
                      "  \"value_city\" TEXT NULL,\n"
                      "  \"value_district\" TEXT NULL,\n"
                      "  \"value_specific_address\" TEXT NULL,\n"
                      "  \"value_as_default\" BOOLEAN NOT NULL DEFAULT FALSE,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"cmall_order\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"cmall_order_recipient_object_id_i\"\n"
                      "  ON \"cmall_order_recipient\" (\"object_id\")");
          db.execute ("CREATE INDEX \"cmall_order_recipient_index_i\"\n"
                      "  ON \"cmall_order_recipient\" (\"index\")");
          db.execute ("CREATE TABLE \"cmall_order_bought_goods\" (\n"
                      "  \"object_id\" BIGINT NOT NULL,\n"
                      "  \"index\" BIGINT NOT NULL,\n"
                      "  \"value_merchant_id\" BIGINT NOT NULL,\n"
                      "  \"value_goods_id\" TEXT NOT NULL,\n"
                      "  \"value_name\" TEXT NOT NULL,\n"
                      "  \"value_price\" NUMERIC NOT NULL,\n"
                      "  \"value_description\" TEXT NOT NULL,\n"
                      "  \"value_good_version_git\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"cmall_order\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"cmall_order_bought_goods_object_id_i\"\n"
                      "  ON \"cmall_order_bought_goods\" (\"object_id\")");
          db.execute ("CREATE INDEX \"cmall_order_bought_goods_index_i\"\n"
                      "  ON \"cmall_order_bought_goods\" (\"index\")");
          db.execute ("CREATE TABLE \"cmall_cart\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"uid\" BIGINT NOT NULL,\n"
                      "  \"merchant_id\" BIGINT NOT NULL,\n"
                      "  \"goods_id\" TEXT NOT NULL,\n"
                      "  \"count\" BIGINT NOT NULL,\n"
                      "  \"created_at\" TIMESTAMP NULL,\n"
                      "  \"updated_at\" TIMESTAMP NULL)");
          db.execute ("CREATE INDEX \"cmall_cart_uid_i\"\n"
                      "  ON \"cmall_cart\" (\"uid\")");
          db.execute ("CREATE TABLE \"cmall_apply_for_mechant\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"applicant\" BIGINT NULL,\n"
                      "  \"ext\" TEXT NOT NULL,\n"
                      "  \"created_at\" TIMESTAMP NULL,\n"
                      "  \"updated_at\" TIMESTAMP NULL,\n"
                      "  \"deleted_at\" TIMESTAMP NULL,\n"
                      "  CONSTRAINT \"applicant_fk\"\n"
                      "    FOREIGN KEY (\"applicant\")\n"
                      "    REFERENCES \"cmall_user\" (\"uid\")\n"
                      "    INITIALLY DEFERRED)");
          db.execute ("CREATE INDEX \"cmall_apply_for_mechant_applicant_i\"\n"
                      "  ON \"cmall_apply_for_mechant\" (\"applicant\")");
          return true;
        }
        case 2:
        {
          db.execute ("CREATE TABLE IF NOT EXISTS \"schema_version\" (\n"
                      "  \"name\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"version\" BIGINT NOT NULL,\n"
                      "  \"migration\" BOOLEAN NOT NULL)");
          db.execute ("INSERT INTO \"schema_version\" (\n"
                      "  \"name\", \"version\", \"migration\")\n"
                      "  SELECT '', 11, FALSE\n"
                      "  WHERE NOT EXISTS (\n"
                      "    SELECT 1 FROM \"schema_version\" WHERE \"name\" = '')");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_pgsql,
    "",
    &create_schema);

  static const schema_catalog_migrate_entry
  migrate_schema_entry_8_ (
    id_pgsql,
    "",
    8ULL,
    0);

  static bool
  migrate_schema_9 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"cmall_apply_for_mechant\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"applicant\" BIGINT NULL,\n"
                      "  \"ext\" TEXT NOT NULL,\n"
                      "  \"created_at\" TIMESTAMP NULL,\n"
                      "  \"updated_at\" TIMESTAMP NULL,\n"
                      "  \"deleted_at\" TIMESTAMP NULL)");
          db.execute ("CREATE INDEX \"cmall_apply_for_mechant_applicant_i\"\n"
                      "  ON \"cmall_apply_for_mechant\" (\"applicant\")");
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE \"cmall_apply_for_mechant\"\n"
                      "  ADD CONSTRAINT \"applicant_fk\"\n"
                      "    FOREIGN KEY (\"applicant\")\n"
                      "    REFERENCES \"cmall_user\" (\"uid\")\n"
                      "    INITIALLY DEFERRED");
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"version\" = 9, \"migration\" = TRUE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE \"cmall_applicant\"");
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"migration\" = FALSE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_9_ (
    id_pgsql,
    "",
    9ULL,
    &migrate_schema_9);

  static bool
  migrate_schema_10 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"administrators\" (\n"
                      "  \"uid\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"user\" BIGINT NULL)");
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE \"administrators\"\n"
                      "  ADD CONSTRAINT \"user_fk\"\n"
                      "    FOREIGN KEY (\"user\")\n"
                      "    REFERENCES \"cmall_user\" (\"uid\")\n"
                      "    INITIALLY DEFERRED");
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"version\" = 10, \"migration\" = TRUE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"migration\" = FALSE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_10_ (
    id_pgsql,
    "",
    10ULL,
    &migrate_schema_10);

  static bool
  migrate_schema_11 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("ALTER TABLE \"cmall_merchant\"\n"
                      "  ADD COLUMN \"api_token\" TEXT NULL");
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"version\" = 11, \"migration\" = TRUE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE \"schema_version\"\n"
                      "  SET \"migration\" = FALSE\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_11_ (
    id_pgsql,
    "",
    11ULL,
    &migrate_schema_11);
}

#include <odb/post.hxx>
