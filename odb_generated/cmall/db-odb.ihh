// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // cmall_config
  //

  inline
  access::object_traits< ::cmall_config >::id_type
  access::object_traits< ::cmall_config >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::cmall_config >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_config >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_user
  //

  inline
  access::object_traits< ::cmall_user >::id_type
  access::object_traits< ::cmall_user >::
  id (const object_type& o)
  {
    return o.uid_;
  }

  inline
  void access::object_traits< ::cmall_user >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_user >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // administrators
  //

  inline
  access::object_traits< ::administrators >::id_type
  access::object_traits< ::administrators >::
  id (const object_type& o)
  {
    return o.uid_;
  }

  inline
  void access::object_traits< ::administrators >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::administrators >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_apptoken
  //

  inline
  access::object_traits< ::cmall_apptoken >::id_type
  access::object_traits< ::cmall_apptoken >::
  id (const object_type& o)
  {
    return o.apptoken;
  }

  inline
  void access::object_traits< ::cmall_apptoken >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_apptoken >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_merchant
  //

  inline
  access::object_traits< ::cmall_merchant >::id_type
  access::object_traits< ::cmall_merchant >::
  id (const object_type& o)
  {
    return o.uid_;
  }

  inline
  void access::object_traits< ::cmall_merchant >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_merchant >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_order
  //

  inline
  access::object_traits< ::cmall_order >::id_type
  access::object_traits< ::cmall_order >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::cmall_order >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_order >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_order_stat
  //

  inline
  void access::view_traits< ::cmall_order_stat >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_cart
  //

  inline
  access::object_traits< ::cmall_cart >::id_type
  access::object_traits< ::cmall_cart >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::cmall_cart >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_cart >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_user_fav
  //

  inline
  access::object_traits< ::cmall_user_fav >::id_type
  access::object_traits< ::cmall_user_fav >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::cmall_user_fav >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_user_fav >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_apply_for_mechant
  //

  inline
  access::object_traits< ::cmall_apply_for_mechant >::id_type
  access::object_traits< ::cmall_apply_for_mechant >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::cmall_apply_for_mechant >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_apply_for_mechant >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_3rd_kv_store
  //

  inline
  access::object_traits< ::cmall_3rd_kv_store >::id_type
  access::object_traits< ::cmall_3rd_kv_store >::
  id (const object_type& o)
  {
    return o.key_;
  }

  inline
  void access::object_traits< ::cmall_3rd_kv_store >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_3rd_kv_store >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // cmall_3rd_public_kv_store
  //

  inline
  access::object_traits< ::cmall_3rd_public_kv_store >::id_type
  access::object_traits< ::cmall_3rd_public_kv_store >::
  id (const object_type& o)
  {
    return o.key_;
  }

  inline
  void access::object_traits< ::cmall_3rd_public_kv_store >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::cmall_3rd_public_kv_store >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // max_application_seq
  //

  inline
  void access::view_traits< ::max_application_seq >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // cmall_config
  //

  inline
  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_config, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Recipient
  //

  inline
  bool access::composite_value_traits< ::Recipient, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.name_null;
    r = r && i.telephone_null;
    r = r && i.address_null;
    r = r && i.province_null;
    r = r && i.city_null;
    r = r && i.district_null;
    r = r && i.specific_address_null;
    r = r && i.as_default_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::Recipient, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.name_null = true;
    i.telephone_null = true;
    i.address_null = true;
    i.province_null = true;
    i.city_null = true;
    i.district_null = true;
    i.specific_address_null = true;
    i.as_default_null = true;
  }

  // cmall_user
  //

  inline
  void access::object_traits_impl< ::cmall_user, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // administrators
  //

  inline
  void access::object_traits_impl< ::administrators, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::administrators, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // cmall_apptoken
  //

  inline
  void access::object_traits_impl< ::cmall_apptoken, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_apptoken, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // cmall_merchant
  //

  inline
  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_merchant, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // goods_snapshot
  //

  inline
  bool access::composite_value_traits< ::goods_snapshot, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.merchant_id_null;
    r = r && i.goods_id_null;
    r = r && i.name_null;
    r = r && i.price_null;
    r = r && i.description_null;
    r = r && i.good_version_git_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::goods_snapshot, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.merchant_id_null = true;
    i.goods_id_null = true;
    i.name_null = true;
    i.price_null = true;
    i.description_null = true;
    i.good_version_git_null = true;
  }

  // cmall_kuaidi_info
  //

  inline
  bool access::composite_value_traits< ::cmall_kuaidi_info, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.kuaidihao_null;
    r = r && i.kuaidigongsi_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::cmall_kuaidi_info, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.kuaidihao_null = true;
    i.kuaidigongsi_null = true;
  }

  // cmall_order
  //

  inline
  void access::object_traits_impl< ::cmall_order, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // cmall_order_stat
  //

  // cmall_cart
  //

  inline
  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_cart, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // cmall_user_fav
  //

  inline
  void access::object_traits_impl< ::cmall_user_fav, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_user_fav, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // cmall_apply_for_mechant
  //

  inline
  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // cmall_kv_store_key
  //

  inline
  bool access::composite_value_traits< ::cmall_kv_store_key, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.uid_null;
    r = r && i.key_value_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::cmall_kv_store_key, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.uid_null = true;
    i.key_value_null = true;
  }

  // cmall_3rd_kv_store
  //

  inline
  void access::object_traits_impl< ::cmall_3rd_kv_store, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_3rd_kv_store, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // cmall_3rd_public_kv_store
  //

  inline
  void access::object_traits_impl< ::cmall_3rd_public_kv_store, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::cmall_3rd_public_kv_store, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // max_application_seq
  //
}

