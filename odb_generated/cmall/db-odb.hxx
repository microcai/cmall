// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DB_ODB_HXX
#define DB_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2047300 // 2.5.0-b.23
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/pgsql/gregorian-traits.hxx>
#include <odb/boost/date-time/pgsql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/pgsql/uuid-traits.hxx>
#include "db_traits.hpp"
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20473UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "cmall/db.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // cmall_config
  //
  template <>
  struct class_traits< ::cmall_config >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_config >
  {
    public:
    typedef ::cmall_config object_type;
    typedef ::boost::shared_ptr< ::cmall_config > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_user
  //
  template <>
  struct class_traits< ::cmall_user >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_user >
  {
    public:
    typedef ::cmall_user object_type;
    typedef ::std::shared_ptr< ::cmall_user > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // administrators
  //
  template <>
  struct class_traits< ::administrators >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::administrators >
  {
    public:
    typedef ::administrators object_type;
    typedef ::boost::shared_ptr< ::administrators > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_apptoken
  //
  template <>
  struct class_traits< ::cmall_apptoken >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_apptoken >
  {
    public:
    typedef ::cmall_apptoken object_type;
    typedef ::boost::shared_ptr< ::cmall_apptoken > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_merchant
  //
  template <>
  struct class_traits< ::cmall_merchant >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_merchant >
  {
    public:
    typedef ::cmall_merchant object_type;
    typedef ::boost::shared_ptr< ::cmall_merchant > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_order
  //
  template <>
  struct class_traits< ::cmall_order >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_order >
  {
    public:
    typedef ::cmall_order object_type;
    typedef ::boost::shared_ptr< ::cmall_order > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_order_stat
  //
  template <>
  struct class_traits< ::cmall_order_stat >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::cmall_order_stat >
  {
    public:
    typedef ::cmall_order_stat view_type;
    typedef ::boost::shared_ptr< ::cmall_order_stat > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // cmall_cart
  //
  template <>
  struct class_traits< ::cmall_cart >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_cart >
  {
    public:
    typedef ::cmall_cart object_type;
    typedef ::boost::shared_ptr< ::cmall_cart > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_user_fav
  //
  template <>
  struct class_traits< ::cmall_user_fav >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_user_fav >
  {
    public:
    typedef ::cmall_user_fav object_type;
    typedef ::boost::shared_ptr< ::cmall_user_fav > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_apply_for_mechant
  //
  template <>
  struct class_traits< ::cmall_apply_for_mechant >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_apply_for_mechant >
  {
    public:
    typedef ::cmall_apply_for_mechant object_type;
    typedef ::boost::shared_ptr< ::cmall_apply_for_mechant > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_3rd_kv_store
  //
  template <>
  struct class_traits< ::cmall_3rd_kv_store >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_3rd_kv_store >
  {
    public:
    typedef ::cmall_3rd_kv_store object_type;
    typedef ::boost::shared_ptr< ::cmall_3rd_kv_store > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::cmall_kv_store_key id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_3rd_public_kv_store
  //
  template <>
  struct class_traits< ::cmall_3rd_public_kv_store >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_3rd_public_kv_store >
  {
    public:
    typedef ::cmall_3rd_public_kv_store object_type;
    typedef ::boost::shared_ptr< ::cmall_3rd_public_kv_store > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::cmall_kv_store_key id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // max_application_seq
  //
  template <>
  struct class_traits< ::max_application_seq >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::max_application_seq >
  {
    public:
    typedef ::max_application_seq view_type;
    typedef ::boost::shared_ptr< ::max_application_seq > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // cmall_index_page_goods
  //
  template <>
  struct class_traits< ::cmall_index_page_goods >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_index_page_goods >
  {
    public:
    typedef ::cmall_index_page_goods object_type;
    typedef ::boost::shared_ptr< ::cmall_index_page_goods > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_index_page_goods_max_order
  //
  template <>
  struct class_traits< ::cmall_index_page_goods_max_order >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::cmall_index_page_goods_max_order >
  {
    public:
    typedef ::cmall_index_page_goods_max_order view_type;
    typedef ::boost::shared_ptr< ::cmall_index_page_goods_max_order > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // cmall_wx_fenzhang
  //
  template <>
  struct class_traits< ::cmall_wx_fenzhang >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_wx_fenzhang >
  {
    public:
    typedef ::cmall_wx_fenzhang object_type;
    typedef ::boost::shared_ptr< ::cmall_wx_fenzhang > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // cmall_session
  //
  template <>
  struct class_traits< ::cmall_session >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::cmall_session >
  {
    public:
    typedef ::cmall_session object_type;
    typedef ::boost::shared_ptr< ::cmall_session > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // cmall_config
  //
  template <typename A>
  struct query_columns< ::cmall_config, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // config_name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    config_name_type_;

    static const config_name_type_ config_name;

    // config_value
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    config_value_type_;

    static const config_value_type_ config_value;
  };

  template <typename A>
  const typename query_columns< ::cmall_config, id_pgsql, A >::id_type_
  query_columns< ::cmall_config, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_config, id_pgsql, A >::config_name_type_
  query_columns< ::cmall_config, id_pgsql, A >::
  config_name (A::table_name, "\"config_name\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_config, id_pgsql, A >::config_value_type_
  query_columns< ::cmall_config, id_pgsql, A >::
  config_value (A::table_name, "\"config_value\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_config, id_pgsql, A >:
    query_columns< ::cmall_config, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_config, id_pgsql >:
    public access::object_traits< ::cmall_config >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // config_name
      //
      details::buffer config_name_value;
      std::size_t config_name_size;
      bool config_name_null;

      // config_value
      //
      details::buffer config_value_value;
      std::size_t config_value_size;
      bool config_value_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_config, id_common >:
    public access::object_traits_impl< ::cmall_config, id_pgsql >
  {
  };

  // Recipient
  //
  template <>
  class access::composite_value_traits< ::Recipient, id_pgsql >
  {
    public:
    typedef ::Recipient value_type;

    struct image_type
    {
      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // telephone
      //
      details::buffer telephone_value;
      std::size_t telephone_size;
      bool telephone_null;

      // address
      //
      details::buffer address_value;
      std::size_t address_size;
      bool address_null;

      // province
      //
      details::buffer province_value;
      std::size_t province_size;
      bool province_null;

      // city
      //
      details::buffer city_value;
      std::size_t city_size;
      bool city_null;

      // district
      //
      details::buffer district_value;
      std::size_t district_size;
      bool district_null;

      // specific_address
      //
      details::buffer specific_address_value;
      std::size_t specific_address_size;
      bool specific_address_null;

      // as_default
      //
      bool as_default_value;
      bool as_default_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 8UL;
  };

  // cmall_user
  //
  template <typename A>
  struct query_columns< ::cmall_user, id_pgsql, A >
  {
    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;

    // active_phone
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    active_phone_type_;

    static const active_phone_type_ active_phone;

    // verified
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        bool,
        pgsql::id_boolean >::query_type,
      pgsql::id_boolean >
    verified_type_;

    static const verified_type_ verified;

    // state
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::user_state_t,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    state_type_;

    static const state_type_ state;

    // desc
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    desc_type_;

    static const desc_type_ desc;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;

    // deleted_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    deleted_at_type_;

    static const deleted_at_type_ deleted_at;
  };

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::uid_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::name_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::active_phone_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  active_phone (A::table_name, "\"active_phone\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::verified_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  verified (A::table_name, "\"verified\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::state_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  state (A::table_name, "\"state\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::desc_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  desc (A::table_name, "\"desc\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user, id_pgsql, A >::deleted_at_type_
  query_columns< ::cmall_user, id_pgsql, A >::
  deleted_at (A::table_name, "\"deleted_at\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_user, id_pgsql, A >:
    query_columns< ::cmall_user, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_user, id_pgsql >:
    public access::object_traits< ::cmall_user >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // uid_
      //
      long long uid_value;
      bool uid_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // active_phone
      //
      details::buffer active_phone_value;
      std::size_t active_phone_size;
      bool active_phone_null;

      // verified_
      //
      bool verified_value;
      bool verified_null;

      // state_
      //
      short state_value;
      bool state_null;

      // desc_
      //
      details::buffer desc_value;
      std::size_t desc_size;
      bool desc_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      // deleted_at_
      //
      long long deleted_at_value;
      bool deleted_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // used_phones
    //
    struct used_phones_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::basic_string< char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< used_phones_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // recipients
    //
    struct recipients_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 10UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::Recipient > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< recipients_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_user, id_common >:
    public access::object_traits_impl< ::cmall_user, id_pgsql >
  {
  };

  // administrators
  //
  template <typename A>
  struct pointer_query_columns< ::administrators, id_pgsql, A >
  {
    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    user_type_;

    static const user_type_ user;
  };

  template <typename A>
  const typename pointer_query_columns< ::administrators, id_pgsql, A >::uid_type_
  pointer_query_columns< ::administrators, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::administrators, id_pgsql, A >::user_type_
  pointer_query_columns< ::administrators, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  template <>
  class access::object_traits_impl< ::administrators, id_pgsql >:
    public access::object_traits< ::administrators >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // uid_
      //
      long long uid_value;
      bool uid_null;

      // user
      //
      long long user_value;
      bool user_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct user_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::administrators, id_common >:
    public access::object_traits_impl< ::administrators, id_pgsql >
  {
  };

  // cmall_apptoken
  //
  template <typename A>
  struct query_columns< ::cmall_apptoken, id_pgsql, A >
  {
    // apptoken
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    apptoken_type_;

    static const apptoken_type_ apptoken;

    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;
  };

  template <typename A>
  const typename query_columns< ::cmall_apptoken, id_pgsql, A >::apptoken_type_
  query_columns< ::cmall_apptoken, id_pgsql, A >::
  apptoken (A::table_name, "\"apptoken\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apptoken, id_pgsql, A >::uid_type_
  query_columns< ::cmall_apptoken, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_apptoken, id_pgsql, A >:
    query_columns< ::cmall_apptoken, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_apptoken, id_pgsql >:
    public access::object_traits< ::cmall_apptoken >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // apptoken
      //
      details::buffer apptoken_value;
      std::size_t apptoken_size;
      bool apptoken_null;

      // uid_
      //
      long long uid_value;
      bool uid_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_apptoken, id_common >:
    public access::object_traits_impl< ::cmall_apptoken, id_pgsql >
  {
  };

  // cmall_merchant
  //
  template <typename A>
  struct query_columns< ::cmall_merchant, id_pgsql, A >
  {
    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;

    // state
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::merchant_state_t,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    state_type_;

    static const state_type_ state;

    // desc
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    desc_type_;

    static const desc_type_ desc;

    // gitea_password
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    gitea_password_type_;

    static const gitea_password_type_ gitea_password;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;

    // deleted_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    deleted_at_type_;

    static const deleted_at_type_ deleted_at;

    // exinfo_wx_mchid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    exinfo_wx_mchid_type_;

    static const exinfo_wx_mchid_type_ exinfo_wx_mchid;
  };

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::uid_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::name_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::state_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  state (A::table_name, "\"state\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::desc_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  desc (A::table_name, "\"desc\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::gitea_password_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  gitea_password (A::table_name, "\"gitea_password\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::deleted_at_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  deleted_at (A::table_name, "\"deleted_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_merchant, id_pgsql, A >::exinfo_wx_mchid_type_
  query_columns< ::cmall_merchant, id_pgsql, A >::
  exinfo_wx_mchid (A::table_name, "\"exinfo_wx_mchid\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_merchant, id_pgsql, A >:
    query_columns< ::cmall_merchant, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_merchant, id_pgsql >:
    public access::object_traits< ::cmall_merchant >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // uid_
      //
      long long uid_value;
      bool uid_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // state_
      //
      short state_value;
      bool state_null;

      // desc_
      //
      details::buffer desc_value;
      std::size_t desc_size;
      bool desc_null;

      // gitea_password
      //
      details::buffer gitea_password_value;
      std::size_t gitea_password_size;
      bool gitea_password_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      // deleted_at_
      //
      long long deleted_at_value;
      bool deleted_at_null;

      // exinfo_wx_mchid
      //
      details::buffer exinfo_wx_mchid_value;
      std::size_t exinfo_wx_mchid_size;
      bool exinfo_wx_mchid_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_merchant, id_common >:
    public access::object_traits_impl< ::cmall_merchant, id_pgsql >
  {
  };

  // goods_snapshot
  //
  template <>
  class access::composite_value_traits< ::goods_snapshot, id_pgsql >
  {
    public:
    typedef ::goods_snapshot value_type;

    struct image_type
    {
      // merchant_id
      //
      long long merchant_id_value;
      bool merchant_id_null;

      // goods_id
      //
      details::buffer goods_id_value;
      std::size_t goods_id_size;
      bool goods_id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // price_
      //
      details::buffer price_value;
      std::size_t price_size;
      bool price_null;

      // description_
      //
      details::buffer description_value;
      std::size_t description_size;
      bool description_null;

      // good_version_git
      //
      details::buffer good_version_git_value;
      std::size_t good_version_git_size;
      bool good_version_git_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 6UL;
  };

  // cmall_kuaidi_info
  //
  template <>
  class access::composite_value_traits< ::cmall_kuaidi_info, id_pgsql >
  {
    public:
    typedef ::cmall_kuaidi_info value_type;

    struct image_type
    {
      // kuaidihao
      //
      details::buffer kuaidihao_value;
      std::size_t kuaidihao_size;
      bool kuaidihao_null;

      // kuaidigongsi
      //
      details::buffer kuaidigongsi_value;
      std::size_t kuaidigongsi_size;
      bool kuaidigongsi_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // cmall_order
  //
  template <typename A>
  struct query_columns< ::cmall_order, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // oid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    oid_type_;

    static const oid_type_ oid;

    // buyer
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    buyer_type_;

    static const buyer_type_ buyer;

    // seller
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    seller_type_;

    static const seller_type_ seller;

    // price
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::cpp_numeric,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    price_type_;

    static const price_type_ price;

    // pay_amount
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::cpp_numeric,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    pay_amount_type_;

    static const pay_amount_type_ pay_amount;

    // kuaidifei
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::cpp_numeric,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    kuaidifei_type_;

    static const kuaidifei_type_ kuaidifei;

    // stage
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint8_t,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    stage_type_;

    static const stage_type_ stage;

    // payed_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    payed_at_type_;

    static const payed_at_type_ payed_at;

    // close_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    close_at_type_;

    static const close_at_type_ close_at;

    // snap_git_version
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    snap_git_version_type_;

    static const snap_git_version_type_ snap_git_version;

    // ext
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::basic_string< char >,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ext_type_;

    static const ext_type_ ext;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;

    // deleted_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    deleted_at_type_;

    static const deleted_at_type_ deleted_at;
  };

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::id_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::oid_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  oid (A::table_name, "\"oid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::buyer_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  buyer (A::table_name, "\"buyer\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::seller_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  seller (A::table_name, "\"seller\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::price_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  price (A::table_name, "\"price\"", "(?)::numeric");

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::pay_amount_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  pay_amount (A::table_name, "\"pay_amount\"", "(?)::numeric");

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::kuaidifei_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  kuaidifei (A::table_name, "\"kuaidifei\"", "(?)::numeric");

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::stage_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  stage (A::table_name, "\"stage\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::payed_at_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  payed_at (A::table_name, "\"payed_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::close_at_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  close_at (A::table_name, "\"close_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::snap_git_version_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  snap_git_version (A::table_name, "\"snap_git_version\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::ext_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  ext (A::table_name, "\"ext\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_order, id_pgsql, A >::deleted_at_type_
  query_columns< ::cmall_order, id_pgsql, A >::
  deleted_at (A::table_name, "\"deleted_at\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_order, id_pgsql, A >:
    query_columns< ::cmall_order, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_order, id_pgsql >:
    public access::object_traits< ::cmall_order >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // oid_
      //
      details::buffer oid_value;
      std::size_t oid_size;
      bool oid_null;

      // buyer_
      //
      long long buyer_value;
      bool buyer_null;

      // seller_
      //
      long long seller_value;
      bool seller_null;

      // price_
      //
      details::buffer price_value;
      std::size_t price_size;
      bool price_null;

      // pay_amount_
      //
      details::buffer pay_amount_value;
      std::size_t pay_amount_size;
      bool pay_amount_null;

      // kuaidifei
      //
      details::buffer kuaidifei_value;
      std::size_t kuaidifei_size;
      bool kuaidifei_null;

      // stage_
      //
      short stage_value;
      bool stage_null;

      // payed_at_
      //
      long long payed_at_value;
      bool payed_at_null;

      // close_at_
      //
      long long close_at_value;
      bool close_at_null;

      // snap_git_version
      //
      details::buffer snap_git_version_value;
      std::size_t snap_git_version_size;
      bool snap_git_version_null;

      // ext_
      //
      details::buffer ext_value;
      std::size_t ext_size;
      bool ext_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      // deleted_at_
      //
      long long deleted_at_value;
      bool deleted_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // recipient
    //
    struct recipient_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 10UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::Recipient > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< recipient_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // bought_goods
    //
    struct bought_goods_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 8UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::goods_snapshot > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< bought_goods_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // kuaidi
    //
    struct kuaidi_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 4UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::cmall_kuaidi_info > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< kuaidi_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 15UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_order, id_common >:
    public access::object_traits_impl< ::cmall_order, id_pgsql >
  {
  };

  // cmall_order_stat
  //
  template <>
  class access::view_traits_impl< ::cmall_order_stat, id_pgsql >:
    public access::view_traits< ::cmall_order_stat >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::cmall_order_stat, id_common >:
    public access::view_traits_impl< ::cmall_order_stat, id_pgsql >
  {
  };

  // cmall_cart
  //
  template <typename A>
  struct query_columns< ::cmall_cart, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;

    // merchant_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    merchant_id_type_;

    static const merchant_id_type_ merchant_id;

    // goods_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    goods_id_type_;

    static const goods_id_type_ goods_id;

    // count
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    count_type_;

    static const count_type_ count;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;
  };

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::id_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::uid_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::merchant_id_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  merchant_id (A::table_name, "\"merchant_id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::goods_id_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  goods_id (A::table_name, "\"goods_id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::count_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  count (A::table_name, "\"count\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_cart, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_cart, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_cart, id_pgsql, A >:
    query_columns< ::cmall_cart, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_cart, id_pgsql >:
    public access::object_traits< ::cmall_cart >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // uid_
      //
      long long uid_value;
      bool uid_null;

      // merchant_id_
      //
      long long merchant_id_value;
      bool merchant_id_null;

      // goods_id_
      //
      details::buffer goods_id_value;
      std::size_t goods_id_size;
      bool goods_id_null;

      // count_
      //
      long long count_value;
      bool count_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_cart, id_common >:
    public access::object_traits_impl< ::cmall_cart, id_pgsql >
  {
  };

  // cmall_user_fav
  //
  template <typename A>
  struct query_columns< ::cmall_user_fav, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;

    // merchant_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    merchant_id_type_;

    static const merchant_id_type_ merchant_id;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;
  };

  template <typename A>
  const typename query_columns< ::cmall_user_fav, id_pgsql, A >::id_type_
  query_columns< ::cmall_user_fav, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user_fav, id_pgsql, A >::uid_type_
  query_columns< ::cmall_user_fav, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user_fav, id_pgsql, A >::merchant_id_type_
  query_columns< ::cmall_user_fav, id_pgsql, A >::
  merchant_id (A::table_name, "\"merchant_id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user_fav, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_user_fav, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_user_fav, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_user_fav, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_user_fav, id_pgsql, A >:
    query_columns< ::cmall_user_fav, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_user_fav, id_pgsql >:
    public access::object_traits< ::cmall_user_fav >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // uid_
      //
      long long uid_value;
      bool uid_null;

      // merchant_id_
      //
      long long merchant_id_value;
      bool merchant_id_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_user_fav, id_common >:
    public access::object_traits_impl< ::cmall_user_fav, id_pgsql >
  {
  };

  // cmall_apply_for_mechant
  //
  template <typename A>
  struct pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // applicant
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    applicant_type_;

    static const applicant_type_ applicant;

    // seq
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    seq_type_;

    static const seq_type_ seq;

    // state
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::approve_state_t,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    state_type_;

    static const state_type_ state;

    // ext
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ext_type_;

    static const ext_type_ ext;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;

    // deleted_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    deleted_at_type_;

    static const deleted_at_type_ deleted_at;
  };

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::id_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::applicant_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  applicant (A::table_name, "\"applicant\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::seq_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  seq (A::table_name, "\"seq\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::state_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  state (A::table_name, "\"state\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::ext_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  ext (A::table_name, "\"ext\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::created_at_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::updated_at_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::deleted_at_type_
  pointer_query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  deleted_at (A::table_name, "\"deleted_at\"", 0);

  template <>
  class access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >:
    public access::object_traits< ::cmall_apply_for_mechant >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // applicant_
      //
      long long applicant_value;
      bool applicant_null;

      // seq
      //
      long long seq_value;
      bool seq_null;

      // state_
      //
      short state_value;
      bool state_null;

      // ext_
      //
      details::buffer ext_value;
      std::size_t ext_size;
      bool ext_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      // deleted_at_
      //
      long long deleted_at_value;
      bool deleted_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct applicant_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_apply_for_mechant, id_common >:
    public access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >
  {
  };

  // cmall_kv_store_key
  //
  template <>
  class access::composite_value_traits< ::cmall_kv_store_key, id_pgsql >
  {
    public:
    typedef ::cmall_kv_store_key value_type;

    struct image_type
    {
      // uid_
      //
      long long uid_value;
      bool uid_null;

      // key_value_
      //
      details::buffer key_value_value;
      std::size_t key_value_size;
      bool key_value_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // cmall_3rd_kv_store
  //
  template <typename A>
  struct query_columns< ::cmall_3rd_kv_store, id_pgsql, A >
  {
    // key
    //
    struct key_class_
    {
      key_class_ ()
      {
      }

      // uid
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      uid_type_;

      static const uid_type_ uid;

      // key_value
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      key_value_type_;

      static const key_value_type_ key_value;
    };

    static const key_class_ key;

    // value
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    value_type_;

    static const value_type_ value;
  };

  template <typename A>
  const typename query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::key_class_::uid_type_
  query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::key_class_::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::key_class_::key_value_type_
  query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::key_class_::
  key_value (A::table_name, "\"key_value\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::key_class_
  query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::key;

  template <typename A>
  const typename query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::value_type_
  query_columns< ::cmall_3rd_kv_store, id_pgsql, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_3rd_kv_store, id_pgsql, A >:
    query_columns< ::cmall_3rd_kv_store, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_3rd_kv_store, id_pgsql >:
    public access::object_traits< ::cmall_3rd_kv_store >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::cmall_kv_store_key, id_pgsql >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // key_
      //
      composite_value_traits< ::cmall_kv_store_key, id_pgsql >::image_type key_value;

      // value_
      //
      details::buffer value_value;
      std::size_t value_size;
      bool value_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_3rd_kv_store, id_common >:
    public access::object_traits_impl< ::cmall_3rd_kv_store, id_pgsql >
  {
  };

  // cmall_3rd_public_kv_store
  //
  template <typename A>
  struct query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >
  {
    // key
    //
    struct key_class_
    {
      key_class_ ()
      {
      }

      // uid
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::query_type,
        pgsql::id_bigint >
      uid_type_;

      static const uid_type_ uid;

      // key_value
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      key_value_type_;

      static const key_value_type_ key_value;
    };

    static const key_class_ key;

    // value
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    value_type_;

    static const value_type_ value;
  };

  template <typename A>
  const typename query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::key_class_::uid_type_
  query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::key_class_::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::key_class_::key_value_type_
  query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::key_class_::
  key_value (A::table_name, "\"key_value\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::key_class_
  query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::key;

  template <typename A>
  const typename query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::value_type_
  query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >:
    query_columns< ::cmall_3rd_public_kv_store, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_3rd_public_kv_store, id_pgsql >:
    public access::object_traits< ::cmall_3rd_public_kv_store >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::cmall_kv_store_key, id_pgsql >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // key_
      //
      composite_value_traits< ::cmall_kv_store_key, id_pgsql >::image_type key_value;

      // value_
      //
      details::buffer value_value;
      std::size_t value_size;
      bool value_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_3rd_public_kv_store, id_common >:
    public access::object_traits_impl< ::cmall_3rd_public_kv_store, id_pgsql >
  {
  };

  // max_application_seq
  //
  template <>
  class access::view_traits_impl< ::max_application_seq, id_pgsql >:
    public access::view_traits< ::max_application_seq >
  {
    public:
    struct image_type
    {
      // last_seq
      //
      long long last_seq_value;
      bool last_seq_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::max_application_seq, id_common >:
    public access::view_traits_impl< ::max_application_seq, id_pgsql >
  {
  };

  // cmall_index_page_goods
  //
  template <typename A>
  struct query_columns< ::cmall_index_page_goods, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // merchant_id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    merchant_id_type_;

    static const merchant_id_type_ merchant_id;

    // goods
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    goods_type_;

    static const goods_type_ goods;

    // order
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    order_type_;

    static const order_type_ order;
  };

  template <typename A>
  const typename query_columns< ::cmall_index_page_goods, id_pgsql, A >::id_type_
  query_columns< ::cmall_index_page_goods, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_index_page_goods, id_pgsql, A >::merchant_id_type_
  query_columns< ::cmall_index_page_goods, id_pgsql, A >::
  merchant_id (A::table_name, "\"merchant_id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_index_page_goods, id_pgsql, A >::goods_type_
  query_columns< ::cmall_index_page_goods, id_pgsql, A >::
  goods (A::table_name, "\"goods\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_index_page_goods, id_pgsql, A >::order_type_
  query_columns< ::cmall_index_page_goods, id_pgsql, A >::
  order (A::table_name, "\"order\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_index_page_goods, id_pgsql, A >:
    query_columns< ::cmall_index_page_goods, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_index_page_goods, id_pgsql >:
    public access::object_traits< ::cmall_index_page_goods >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // merchant_id
      //
      long long merchant_id_value;
      bool merchant_id_null;

      // goods
      //
      details::buffer goods_value;
      std::size_t goods_size;
      bool goods_null;

      // order
      //
      int order_value;
      bool order_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_index_page_goods, id_common >:
    public access::object_traits_impl< ::cmall_index_page_goods, id_pgsql >
  {
  };

  // cmall_index_page_goods_max_order
  //
  template <>
  class access::view_traits_impl< ::cmall_index_page_goods_max_order, id_pgsql >:
    public access::view_traits< ::cmall_index_page_goods_max_order >
  {
    public:
    struct image_type
    {
      // max_order
      //
      int max_order_value;
      bool max_order_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::cmall_index_page_goods_max_order, id_common >:
    public access::view_traits_impl< ::cmall_index_page_goods_max_order, id_pgsql >
  {
  };

  // cmall_wx_fenzhang
  //
  template <typename A>
  struct query_columns< ::cmall_wx_fenzhang, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    type_type_;

    static const type_type_ type;

    // account
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    account_type_;

    static const account_type_ account;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;

    // relation_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    relation_type_type_;

    static const relation_type_type_ relation_type;

    // percent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    percent_type_;

    static const percent_type_ percent;
  };

  template <typename A>
  const typename query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::id_type_
  query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::type_type_
  query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::account_type_
  query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::
  account (A::table_name, "\"account\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::name_type_
  query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::relation_type_type_
  query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::
  relation_type (A::table_name, "\"relation_type\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::percent_type_
  query_columns< ::cmall_wx_fenzhang, id_pgsql, A >::
  percent (A::table_name, "\"percent\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cmall_wx_fenzhang, id_pgsql, A >:
    query_columns< ::cmall_wx_fenzhang, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cmall_wx_fenzhang, id_pgsql >:
    public access::object_traits< ::cmall_wx_fenzhang >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // type
      //
      details::buffer type_value;
      std::size_t type_size;
      bool type_null;

      // account
      //
      details::buffer account_value;
      std::size_t account_size;
      bool account_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // relation_type
      //
      details::buffer relation_type_value;
      std::size_t relation_type_size;
      bool relation_type_null;

      // percent
      //
      details::buffer percent_value;
      std::size_t percent_size;
      bool percent_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_wx_fenzhang, id_common >:
    public access::object_traits_impl< ::cmall_wx_fenzhang, id_pgsql >
  {
  };

  // cmall_session
  //
  template <typename A>
  struct pointer_query_columns< ::cmall_session, id_pgsql, A >
  {
    // cache_key
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cache_key_type_;

    static const cache_key_type_ cache_key;

    // owner
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    owner_type_;

    static const owner_type_ owner;

    // cache_content
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cache_content_type_;

    static const cache_content_type_ cache_content;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;
  };

  template <typename A>
  const typename pointer_query_columns< ::cmall_session, id_pgsql, A >::cache_key_type_
  pointer_query_columns< ::cmall_session, id_pgsql, A >::
  cache_key (A::table_name, "\"cache_key\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_session, id_pgsql, A >::owner_type_
  pointer_query_columns< ::cmall_session, id_pgsql, A >::
  owner (A::table_name, "\"owner\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_session, id_pgsql, A >::cache_content_type_
  pointer_query_columns< ::cmall_session, id_pgsql, A >::
  cache_content (A::table_name, "\"cache_content\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_session, id_pgsql, A >::created_at_type_
  pointer_query_columns< ::cmall_session, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::cmall_session, id_pgsql, A >::updated_at_type_
  pointer_query_columns< ::cmall_session, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <>
  class access::object_traits_impl< ::cmall_session, id_pgsql >:
    public access::object_traits< ::cmall_session >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // cache_key
      //
      details::buffer cache_key_value;
      std::size_t cache_key_size;
      bool cache_key_null;

      // owner
      //
      long long owner_value;
      bool owner_null;

      // cache_content
      //
      details::buffer cache_content_value;
      std::size_t cache_content_size;
      bool cache_content_null;

      // created_at_
      //
      long long created_at_value;
      bool created_at_null;

      // updated_at_
      //
      long long updated_at_value;
      bool updated_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct owner_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    static const std::size_t batch = 1UL;

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::cmall_session, id_common >:
    public access::object_traits_impl< ::cmall_session, id_pgsql >
  {
  };

  // cmall_config
  //
  // cmall_user
  //
  // administrators
  //
  template <>
  struct alias_traits<
    ::cmall_user,
    id_pgsql,
    access::object_traits_impl< ::administrators, id_pgsql >::user_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::administrators, id_pgsql >
  {
    // user
    //
    typedef
    odb::alias_traits<
      ::cmall_user,
      id_pgsql,
      access::object_traits_impl< ::administrators, id_pgsql >::user_tag>
    user_alias_;
  };

  template <typename A>
  struct query_columns< ::administrators, id_pgsql, A >:
    query_columns_base< ::administrators, id_pgsql >
  {
    // uid
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    uid_type_;

    static const uid_type_ uid;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    user_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::cmall_user,
        id_pgsql,
        user_alias_ > >
    user_pointer_type_;

    struct user_type_: user_pointer_type_, user_column_type_
    {
      user_type_ (const char* t, const char* c, const char* conv)
        : user_column_type_ (t, c, conv)
      {
      }
    };

    static const user_type_ user;
  };

  template <typename A>
  const typename query_columns< ::administrators, id_pgsql, A >::uid_type_
  query_columns< ::administrators, id_pgsql, A >::
  uid (A::table_name, "\"uid\"", 0);

  template <typename A>
  const typename query_columns< ::administrators, id_pgsql, A >::user_type_
  query_columns< ::administrators, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  // cmall_apptoken
  //
  // cmall_merchant
  //
  // cmall_order
  //
  // cmall_order_stat
  //
  struct access::view_traits_impl< ::cmall_order_stat, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::cmall_order,
      id_pgsql,
      odb::access::object_traits_impl< ::cmall_order, id_pgsql > >
  {
  };

  // cmall_cart
  //
  // cmall_user_fav
  //
  // cmall_apply_for_mechant
  //
  template <>
  struct alias_traits<
    ::cmall_user,
    id_pgsql,
    access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::applicant_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::cmall_apply_for_mechant, id_pgsql >
  {
    // applicant
    //
    typedef
    odb::alias_traits<
      ::cmall_user,
      id_pgsql,
      access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql >::applicant_tag>
    applicant_alias_;
  };

  template <typename A>
  struct query_columns< ::cmall_apply_for_mechant, id_pgsql, A >:
    query_columns_base< ::cmall_apply_for_mechant, id_pgsql >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // applicant
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    applicant_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::cmall_user,
        id_pgsql,
        applicant_alias_ > >
    applicant_pointer_type_;

    struct applicant_type_: applicant_pointer_type_, applicant_column_type_
    {
      applicant_type_ (const char* t, const char* c, const char* conv)
        : applicant_column_type_ (t, c, conv)
      {
      }
    };

    static const applicant_type_ applicant;

    // seq
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    seq_type_;

    static const seq_type_ seq;

    // state
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::approve_state_t,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    state_type_;

    static const state_type_ state;

    // ext
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ext_type_;

    static const ext_type_ ext;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;

    // deleted_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    deleted_at_type_;

    static const deleted_at_type_ deleted_at;
  };

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::id_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::applicant_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  applicant (A::table_name, "\"applicant\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::seq_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  seq (A::table_name, "\"seq\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::state_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  state (A::table_name, "\"state\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::ext_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  ext (A::table_name, "\"ext\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::deleted_at_type_
  query_columns< ::cmall_apply_for_mechant, id_pgsql, A >::
  deleted_at (A::table_name, "\"deleted_at\"", 0);

  // cmall_3rd_kv_store
  //
  // cmall_3rd_public_kv_store
  //
  // max_application_seq
  //
  struct access::view_traits_impl< ::max_application_seq, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::cmall_apply_for_mechant,
      id_pgsql,
      odb::access::object_traits_impl< ::cmall_apply_for_mechant, id_pgsql > >
  {
  };

  // cmall_index_page_goods
  //
  // cmall_index_page_goods_max_order
  //
  struct access::view_traits_impl< ::cmall_index_page_goods_max_order, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::cmall_index_page_goods,
      id_pgsql,
      odb::access::object_traits_impl< ::cmall_index_page_goods, id_pgsql > >
  {
  };

  // cmall_wx_fenzhang
  //
  // cmall_session
  //
  template <>
  struct alias_traits<
    ::cmall_user,
    id_pgsql,
    access::object_traits_impl< ::cmall_session, id_pgsql >::owner_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::cmall_session, id_pgsql >
  {
    // owner
    //
    typedef
    odb::alias_traits<
      ::cmall_user,
      id_pgsql,
      access::object_traits_impl< ::cmall_session, id_pgsql >::owner_tag>
    owner_alias_;
  };

  template <typename A>
  struct query_columns< ::cmall_session, id_pgsql, A >:
    query_columns_base< ::cmall_session, id_pgsql >
  {
    // cache_key
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cache_key_type_;

    static const cache_key_type_ cache_key;

    // owner
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::uint64_t,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    owner_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::cmall_user,
        id_pgsql,
        owner_alias_ > >
    owner_pointer_type_;

    struct owner_type_: owner_pointer_type_, owner_column_type_
    {
      owner_type_ (const char* t, const char* c, const char* conv)
        : owner_column_type_ (t, c, conv)
      {
      }
    };

    static const owner_type_ owner;

    // cache_content
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cache_content_type_;

    static const cache_content_type_ cache_content;

    // created_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::boost::posix_time::ptime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    updated_at_type_;

    static const updated_at_type_ updated_at;
  };

  template <typename A>
  const typename query_columns< ::cmall_session, id_pgsql, A >::cache_key_type_
  query_columns< ::cmall_session, id_pgsql, A >::
  cache_key (A::table_name, "\"cache_key\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_session, id_pgsql, A >::owner_type_
  query_columns< ::cmall_session, id_pgsql, A >::
  owner (A::table_name, "\"owner\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_session, id_pgsql, A >::cache_content_type_
  query_columns< ::cmall_session, id_pgsql, A >::
  cache_content (A::table_name, "\"cache_content\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_session, id_pgsql, A >::created_at_type_
  query_columns< ::cmall_session, id_pgsql, A >::
  created_at (A::table_name, "\"created_at\"", 0);

  template <typename A>
  const typename query_columns< ::cmall_session, id_pgsql, A >::updated_at_type_
  query_columns< ::cmall_session, id_pgsql, A >::
  updated_at (A::table_name, "\"updated_at\"", 0);
}

#include "cmall/db-odb.ihh"

#include <odb/post.hxx>

#endif // DB_ODB_HXX
