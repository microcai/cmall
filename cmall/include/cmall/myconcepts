
#pragma once

#include <concepts>

namespace concepts
{
	template <typename T>
	concept isString = std::convertible_to<std::string, T>;

	namespace detail {
		template<typename T, int size>
		constexpr auto get_array_size(const T (&array)[size])
		{
			return size;
		}

		template<typename T, int size>
		constexpr auto get_array_size(T (array)[size])
		{
			return size;
		}
	}

	template <typename T>
	concept isArray = requires (const T& f) {
		 detail::get_array_size(f);
	};

	template <typename T>
	concept isContainer = requires (T f) {
		{ ++std::begin(f) };
		{ std::end(f) };
		{ f.size() } -> std::same_as<std::size_t>;
	};

	template <typename T>
	concept isVector = isContainer<T> || isArray<T>;
}
