# file      : odb/pgsql/buildfile
# license   : GNU GPL v2; see accompanying LICENSE file

import int_libs = libodb%lib{odb}
import imp_libs = libpq%lib{pq}

lib{odb-pgsql}: {hxx ixx txx cxx}{* -version-build2} {hxx}{version-build2}   \
        details/{hxx ixx txx cxx}{* -options} details/{hxx ixx cxx}{options} \
 details/build2/{h}{*}                                                       \
                $imp_libs $int_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version-build2}: in{version-build2} $src_root/manifest
hxx{version-build2}:
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root" -DLIBODB_PGSQL_BUILD2

obja{*}: cxx.poptions += -DLIBODB_PGSQL_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBODB_PGSQL_SHARED_BUILD

# Export options.
#
lib{odb-pgsql}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root" -DLIBODB_PGSQL_BUILD2
  cxx.export.libs = $int_libs
}

liba{odb-pgsql}: cxx.export.poptions += -DLIBODB_PGSQL_STATIC
libs{odb-pgsql}: cxx.export.poptions += -DLIBODB_PGSQL_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{odb-pgsql}: bin.lib.version = @"-$version.project_id"
else
  lib{odb-pgsql}: bin.lib.version = @"-$version.major.$version.minor"

# Generated options parser.
#
details/
{
  if $cli.configured
  {
    cli.cxx{options}: cli{options}

    cli.options += --include-with-brackets --include-prefix odb/pgsql/details \
--guard-prefix LIBODB_PGSQL_DETAILS --generate-file-scanner \
--cli-namespace odb::pgsql::details::cli --long-usage --generate-specifier \
--no-combined-flags

    # Include generated cli files into the distribution and don't remove them
    # when cleaning in src (so that clean results in a state identical to
    # distributed). But don't install their headers since they are only used
    # internally in the database implementation.
    #
    cli.cxx{*}:
    {
      dist    = true
      clean   = ($src_root != $out_root)
      install = false
    }
  }
  else
    # No install for the pre-generated case.
    #
    hxx{options}@./ ixx{options}@./: install = false
}

# Install into the odb/pgsql/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
install_include = [dir_path] include/odb/pgsql/

{hxx ixx txx}{*}:
{
  install         = $install_include
  install.subdirs = true
}

# We want these to be picked up whether LIBODB_PGSQL_BUILD2 is defined or not.
#
hxx{version}@./:             install = false
hxx{version-build2}:         install = $install_include/version.hxx
hxx{version-build2-stub}@./: install = $install_include/version-build2.hxx

details/build2/
{
  h{*}: install = false

  if ($cxx.target.system == 'win32-msvc')
  {
    h{config-vc}@./:      install = $install_include/details/
    h{config-vc-stub}@./: install = $install_include/details/build2/config-vc.h
  }
  else
  {
    h{config}@./:      install = $install_include/details/
    h{config-stub}@./: install = $install_include/details/build2/config.h
  }
}
