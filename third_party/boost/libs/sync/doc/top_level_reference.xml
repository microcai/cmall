<?xml version="1.0" standalone="yes"?>
<library-reference id="top_level_headers"><title>Top level headers</title><header name="boost/sync/condition_variables.hpp">
<para>This header includes all condition variable types. </para></header>
<header name="boost/sync/events.hpp">
<para>This header includes all event types. </para></header>
<header name="boost/sync/exceptions.hpp">
<para>This header includes all exception types. </para></header>
<header name="boost/sync/locks.hpp">
<para>This header includes all lock types. </para></header>
<header name="boost/sync/mutexes.hpp">
<para>This header includes all mutex types. </para></header>
<header name="boost/sync/semaphore.hpp">
<namespace name="boost">
<namespace name="sync">
<class name="semaphore"><method-group name="public member functions">
<method name="post"><type>void</type><description><para>Increments the semaphore counter. If one or multiple threads are blocked waiting for the semaphore, then one of these threads returns successfully from its wait function. It is unspecified which thread is released from the wait function.</para><para><emphasis role="bold">Memory</emphasis> Ordering: release</para><para><note><para>The implementation may have an upper limit for the semaphore counter, upon exceeding which the behavior is unspecified. It is safe to assume that values up to <computeroutput>INT_MAX</computeroutput> are supported.</para>
</note>
<emphasis role="bold">Throws:</emphasis> if an error occurs. </para></description></method>
<method name="wait"><type>void</type><description><para>If the semaphore counter is greater than zero, decrements the counter and returns. If the semaphore value is not greater than zero, then the calling thread blocks until it can decrement the counter.</para><para><emphasis role="bold">Memory</emphasis> Ordering: acquire</para><para><emphasis role="bold">Throws:</emphasis> if an error occurs. </para></description></method>
<method name="try_wait"><type>bool</type><description><para>If the semaphore counter is greater than zero, decrements the counter and returns <computeroutput>true</computeroutput>. If the semaphore value is not greater than zero, returns <computeroutput>false</computeroutput>.</para><para><emphasis role="bold">Memory</emphasis> Ordering: acquire, if successful, relaxed otherwise</para><para><emphasis role="bold">Throws:</emphasis> if an error occurs. </para></description></method>
<method name="timed_wait"><type>bool</type><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="timeout"><paramtype>const Time &amp;</paramtype><description><para>The timeout for the operation to complete. The timeout can be specified either as an absolute time point or as a duration. In the latter case the time is measured according to the system clock.</para></description></parameter><description><para>If the semaphore counter is greater than zero, decrements the counter and returns <computeroutput>true</computeroutput>. If the semaphore value is not greater than zero, then the calling thread blocks until it can decrement the counter or the specified timeout expires.</para><para><emphasis role="bold">Memory</emphasis> Ordering: acquire, if successful, relaxed otherwise</para><para>

<emphasis role="bold">Throws:</emphasis> if an error occurs.</para><para><note><para>In order to use this method, a supplementary header must be included from boost/sync/support to enable support for particular time units. </para>
</note>
</para></description><returns><para>If the timeout expires, the function returns <computeroutput>false</computeroutput>. If the semaphore counter is decremented, the function returns <computeroutput>true</computeroutput>.</para>
</returns></method>
<method name="wait_for"><type>bool</type><template>
          <template-type-parameter name="Duration"/>
        </template><parameter name="duration"><paramtype>const Duration &amp;</paramtype><description><para>The timeout for the operation to complete. The timeout should be a duration, which is measured according to the system clock.</para></description></parameter><description><para>If the semaphore counter is greater than zero, decrements the counter and returns <computeroutput>true</computeroutput>. If the semaphore value is not greater than zero, then the calling thread blocks until it can decrement the counter or the specified timeout expires.</para><para><emphasis role="bold">Memory</emphasis> Ordering: acquire, if successful, relaxed otherwise</para><para>

<emphasis role="bold">Throws:</emphasis> if an error occurs.</para><para><note><para>In order to use this method, a supplementary header must be included from boost/sync/support to enable support for particular time units. </para>
</note>
</para></description><returns><para>If the timeout expires, the function returns <computeroutput>false</computeroutput>. If the semaphore counter is decremented, the function returns <computeroutput>true</computeroutput>.</para>
</returns></method>
<method name="wait_until"><type>bool</type><template>
          <template-type-parameter name="TimePoint"/>
        </template><parameter name="timeout"><paramtype>const TimePoint &amp;</paramtype><description><para>The timeout for the operation to complete. The timeout should be an absolute time point.</para></description></parameter><description><para>If the semaphore counter is greater than zero, decrements the counter and returns <computeroutput>true</computeroutput>. If the semaphore value is not greater than zero, then the calling thread blocks until it can decrement the counter or the specified timeout expires.</para><para><emphasis role="bold">Memory</emphasis> Ordering: acquire, if successful, relaxed otherwise</para><para>

<emphasis role="bold">Throws:</emphasis> if an error occurs.</para><para><note><para>In order to use this method, a supplementary header must be included from boost/sync/support to enable support for particular time units. </para>
</note>
</para></description><returns><para>If the timeout expires, the function returns <computeroutput>false</computeroutput>. If the semaphore counter is decremented, the function returns <computeroutput>true</computeroutput>.</para>
</returns></method>
</method-group>
<constructor specifiers="explicit"><parameter name="initial_count"><paramtype>unsigned int</paramtype><default>0</default><description><para>The initial value of the semaphore. There may be an implementation-defined upper limit for the counter value, but it is safe to assume that values up to <computeroutput>INT_MAX</computeroutput> are supported.</para></description></parameter><description><para>Constructs a semaphore object.</para><para>
<emphasis role="bold">Throws:</emphasis> if an error occurs. </para></description></constructor>
<destructor><description><para>Destroys the object</para><para>
</para></description><requires><para>No thread is waiting on the semaphore </para>
</requires></destructor>
<constructor cv="= delete"><parameter name=""><paramtype>semaphore const &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= delete"><type>semaphore &amp;</type><parameter name=""><paramtype>semaphore const &amp;</paramtype></parameter></copy-assignment>
</class></namespace>
</namespace>
</header>
</library-reference>