<?xml version="1.0" standalone="yes"?>
<library-reference id="locks"><title>Locks</title><header name="boost/sync/locks/lock_guard.hpp">
<para>This header defines an exclusive lock guard. </para><namespace name="boost">
<namespace name="sync">



</namespace>
</namespace>
</header>
<header name="boost/sync/locks/lock_guard_fwd.hpp">
<para>This header declares an exclusive lock guard. </para><namespace name="boost">
<namespace name="sync">
<class name="lock_guard"><template>
      <template-type-parameter name="Mutex"/>
    </template><purpose>A unique lock scope guard. </purpose><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter></constructor>
<constructor><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>adopt_lock_t</paramtype></parameter></constructor>
<destructor/>
<constructor cv="= delete"><parameter name=""><paramtype><classname>lock_guard</classname> const &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= delete"><type><classname>lock_guard</classname> &amp;</type><parameter name=""><paramtype><classname>lock_guard</classname> const &amp;</paramtype></parameter></copy-assignment>
</class>


</namespace>
</namespace>
</header>
<header name="boost/sync/locks/lock_options.hpp">
<namespace name="boost">
<namespace name="sync">
<struct name="adopt_lock_t"/><struct name="defer_lock_t"/><struct name="try_to_lock_t"/><data-member name="defer_lock"><type>constexpr defer_lock_t</type></data-member>
<data-member name="try_to_lock"><type>constexpr try_to_lock_t</type></data-member>
<data-member name="adopt_lock"><type>constexpr adopt_lock_t</type></data-member>



</namespace>
</namespace>
</header>
<header name="boost/sync/locks/shared_lock.hpp">
<para>This header defines a shared lock guard. </para><namespace name="boost">
<namespace name="sync">


<function name="swap"><type>void</type><template>
          <template-type-parameter name="Mutex"/>
        </template><parameter name="lhs"><paramtype><classname>shared_lock</classname>&lt; Mutex &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype><classname>shared_lock</classname>&lt; Mutex &gt; &amp;</paramtype></parameter></function>
</namespace>
</namespace>
</header>
<header name="boost/sync/locks/shared_lock_fwd.hpp">
<para>This header declares a shared lock guard. </para><namespace name="boost">
<namespace name="sync">
<class name="shared_lock"><template>
      <template-type-parameter name="Mutex"/>
    </template><purpose>A unique lock scope guard. </purpose><description><para>A shared lock scope guard. </para></description><method-group name="public member functions">
<method name="lock"><type>void</type></method>
<method name="try_lock"><type>bool</type></method>
<method name="timed_lock"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="time"><paramtype>Time const &amp;</paramtype></parameter></method>
<method name="try_lock_for"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Duration"/>
        </template><parameter name="rel_time"><paramtype>Duration const &amp;</paramtype></parameter></method>
<method name="try_lock_until"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="TimePoint"/>
        </template><parameter name="abs_time"><paramtype>TimePoint const &amp;</paramtype></parameter></method>
<method name="unlock"><type>void</type></method>
<method name="conversion-operator" cv="const" specifiers="explicit"><type>bool</type></method>
<method name="operator!" cv="const noexcept"><type>bool</type></method>
<method name="owns_lock" cv="const noexcept"><type>bool</type></method>
<method name="mutex" cv="const noexcept"><type>mutex_type *</type></method>
<method name="release" cv="noexcept"><type>mutex_type *</type></method>
<method name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>shared_lock</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor cv="noexcept"/>
<constructor specifiers="explicit"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>adopt_lock_t</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>defer_lock_t</paramtype></parameter></constructor>
<constructor><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>try_to_lock_t</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="m"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><parameter name="t"><paramtype>Time const &amp;</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="that"><paramtype><classname>shared_lock</classname> &amp;&amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="that"><paramtype><classname>unique_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="that"><paramtype><classname>upgrade_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></constructor>
<destructor/>
<copy-assignment cv="noexcept"><type><classname>shared_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>shared_lock</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>shared_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>unique_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>shared_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>upgrade_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
</class>


</namespace>
</namespace>
</header>
<header name="boost/sync/locks/shared_lock_guard.hpp">
<para>This header defines an exclusive lock guard. </para><namespace name="boost">
<namespace name="sync">



</namespace>
</namespace>
</header>
<header name="boost/sync/locks/shared_lock_guard_fwd.hpp">
<para>This header declares a shared lock guard. </para><namespace name="boost">
<namespace name="sync">
<class name="shared_lock_guard"><template>
      <template-type-parameter name="Mutex"/>
    </template><purpose>A shared lock scope guard. </purpose><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter></constructor>
<constructor><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>adopt_lock_t</paramtype></parameter></constructor>
<destructor/>
<constructor cv="= delete"><parameter name=""><paramtype><classname>shared_lock_guard</classname> const &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= delete"><type><classname>shared_lock_guard</classname> &amp;</type><parameter name=""><paramtype><classname>shared_lock_guard</classname> const &amp;</paramtype></parameter></copy-assignment>
</class>


</namespace>
</namespace>
</header>
<header name="boost/sync/locks/unique_lock.hpp">
<para>This header defines an exclusive lock guard. </para><namespace name="boost">
<namespace name="sync">

<function name="swap"><type>void</type><template>
          <template-type-parameter name="Mutex"/>
        </template><parameter name="lhs"><paramtype><classname>unique_lock</classname>&lt; Mutex &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype><classname>unique_lock</classname>&lt; Mutex &gt; &amp;</paramtype></parameter></function>

</namespace>
</namespace>
</header>
<header name="boost/sync/locks/unique_lock_fwd.hpp">
<para>This header declares an exclusive lock guard. </para><namespace name="boost">
<namespace name="sync">
<class name="unique_lock"><template>
      <template-type-parameter name="Mutex"/>
    </template><purpose>A unique lock scope guard. </purpose><method-group name="public member functions">
<method name="lock"><type>void</type></method>
<method name="try_lock"><type>bool</type></method>
<method name="timed_lock"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="time"><paramtype>Time const &amp;</paramtype></parameter></method>
<method name="try_lock_for"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Duration"/>
        </template><parameter name="rel_time"><paramtype>Duration const &amp;</paramtype></parameter></method>
<method name="try_lock_until"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="TimePoint"/>
        </template><parameter name="abs_time"><paramtype>TimePoint const &amp;</paramtype></parameter></method>
<method name="unlock"><type>void</type></method>
<method name="conversion-operator" cv="const" specifiers="explicit"><type>bool</type></method>
<method name="operator!" cv="const noexcept"><type>bool</type></method>
<method name="owns_lock" cv="const noexcept"><type>bool</type></method>
<method name="mutex" cv="const noexcept"><type>mutex_type *</type></method>
<method name="release" cv="noexcept"><type>mutex_type *</type></method>
<method name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>unique_lock</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor cv="noexcept"/>
<constructor specifiers="explicit"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>adopt_lock_t</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>defer_lock_t</paramtype></parameter></constructor>
<constructor><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>try_to_lock_t</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="m"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><parameter name="t"><paramtype>Time const &amp;</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="that"><paramtype><classname>unique_lock</classname> &amp;&amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="that"><paramtype><classname>upgrade_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></constructor>
<constructor><parameter name="ul"><paramtype><classname>upgrade_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter><parameter name=""><paramtype>try_to_lock_t</paramtype></parameter></constructor>
<constructor><parameter name="sl"><paramtype><classname>shared_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter><parameter name=""><paramtype>try_to_lock_t</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="sl"><paramtype><classname>shared_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter><parameter name="t"><paramtype>Time const &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter></constructor>
<destructor/>
<copy-assignment cv="noexcept"><type><classname>unique_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>unique_lock</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>unique_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>upgrade_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
</class>


</namespace>
</namespace>
</header>
<header name="boost/sync/locks/unlock_guard.hpp">
<para>This header defines a scope guard temporarily releases a lock. </para><namespace name="boost">
<namespace name="sync">



</namespace>
</namespace>
</header>
<header name="boost/sync/locks/unlock_guard_fwd.hpp">
<para>This header declares a scope guard that temporarily releases the lock. </para><namespace name="boost">
<namespace name="sync">
<class name="unlock_guard"><template>
      <template-type-parameter name="Lockable"/>
    </template><purpose>An unlock scope guard. </purpose><description><para>A scope guard that releases a lock. </para></description><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit" cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter></constructor>
<destructor/>
<constructor cv="= delete"><parameter name=""><paramtype><classname>unlock_guard</classname> const &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= delete"><type><classname>unlock_guard</classname> &amp;</type><parameter name=""><paramtype><classname>unlock_guard</classname> const &amp;</paramtype></parameter></copy-assignment>
</class>


</namespace>
</namespace>
</header>
<header name="boost/sync/locks/upgrade_lock.hpp">
<para>This header defines an upgradeable lock guard. </para><namespace name="boost">
<namespace name="sync">
<function name="swap"><type>void</type><template>
          <template-type-parameter name="Mutex"/>
        </template><parameter name="lhs"><paramtype><classname>upgrade_lock</classname>&lt; Mutex &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype><classname>upgrade_lock</classname>&lt; Mutex &gt; &amp;</paramtype></parameter></function>


</namespace>
</namespace>
</header>
<header name="boost/sync/locks/upgrade_lock_fwd.hpp">
<para>This header declares an upgrade lock guard. </para><namespace name="boost">
<namespace name="sync">
<class name="upgrade_lock"><template>
      <template-type-parameter name="Mutex"/>
    </template><purpose>A unique lock scope guard. </purpose><description><para>An upgradeable lock scope guard. </para></description><method-group name="public member functions">
<method name="lock"><type>void</type></method>
<method name="try_lock"><type>bool</type></method>
<method name="timed_lock"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="time"><paramtype>Time const &amp;</paramtype></parameter></method>
<method name="try_lock_for"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="Duration"/>
        </template><parameter name="rel_time"><paramtype>Duration const &amp;</paramtype></parameter></method>
<method name="try_lock_until"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="TimePoint"/>
        </template><parameter name="abs_time"><paramtype>TimePoint const &amp;</paramtype></parameter></method>
<method name="unlock"><type>void</type></method>
<method name="conversion-operator" cv="const" specifiers="explicit"><type>bool</type></method>
<method name="operator!" cv="const noexcept"><type>bool</type></method>
<method name="owns_lock" cv="const noexcept"><type>bool</type></method>
<method name="mutex" cv="const noexcept"><type>mutex_type *</type></method>
<method name="release" cv="noexcept"><type>mutex_type *</type></method>
<method name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>upgrade_lock</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor cv="noexcept"/>
<constructor specifiers="explicit"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>adopt_lock_t</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>defer_lock_t</paramtype></parameter></constructor>
<constructor><parameter name="m"><paramtype>mutex_type &amp;</paramtype></parameter><parameter name=""><paramtype>try_to_lock_t</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="m"><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><parameter name="t"><paramtype>Time const &amp;</paramtype></parameter></constructor>
<constructor cv="noexcept"><parameter name="that"><paramtype><classname>upgrade_lock</classname> &amp;&amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="that"><paramtype><classname>unique_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></constructor>
<constructor><parameter name="sl"><paramtype><classname>shared_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter><parameter name=""><paramtype>try_to_lock_t</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Time"/>
        </template><parameter name="sl"><paramtype><classname>shared_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter><parameter name="t"><paramtype>Time const &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter></constructor>
<destructor/>
<copy-assignment cv="noexcept"><type><classname>upgrade_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>upgrade_lock</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>upgrade_lock</classname> &amp;</type><parameter name="that"><paramtype><classname>unique_lock</classname>&lt; mutex_type &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
</class>


</namespace>
</namespace>
</header>
</library-reference>